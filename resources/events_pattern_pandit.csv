"Event Name","Event Description"
"login_screen_opened","When the user lands on login/signup screen and the T&C/privacy policy text is set up. Triggered from SliceLoginFragmentV2.setUpTncText() during renderLandingPage() when the screen transitions to LandingPage state. Implementation: SliceLoginViewModelV2.trackLoginScreenOpened() -> EventTrackingUtils.trackLoginScreenOpenedEvent(). Properties: hyperlink_count (number of T&C/privacy links), hyperlinks (array of link text like 'Terms of Use', 'Privacy Policy'). Event Type: PAGE_OPEN. This tracks successful loading and rendering of the login screen with all its interactive elements."
"login_screen_hyperlink_clicked","When user clicks on T&C or Privacy Policy links in login screen. Triggered from ClickableSpan.onClick() within setUpTncText() when user taps hyperlinks. Implementation: SliceLoginViewModelV2.trackLoginScreenHyperlinkClicked() -> EventTrackingUtils.trackLoginScreenHyperlinkClickedEvent(). Properties: hyperlink_clicked (specific link text that was clicked like 'Terms of Use' or 'Privacy Policy'). Event Type: CTA. Only fires when internet is available and navigates to WebView."
"login_screen_cta_clicked","When user clicks the 'Get Started' button on login screen. Triggered from getStartedButton.setSafeOnClickListener() -> onGetStartedClicked() -> cacheTnCAcceptance() flow. Implementation: SliceLoginViewModelV2.trackLoginScreenCtaClicked() -> EventTrackingUtils.trackLoginScreenCtaClickedEvent(). Properties: sms_permission_given (boolean), phone_permission_given (boolean), permission_screen_to_be_shown (boolean). Event Type: CTA. This captures user's permission state and whether they'll see permission screen next."
"permissions_pdp_page_opened","When user lands on permissions PDP page during phone verification flow. Triggered from PhoneVerificationPermissionFragment.onAttach() after getPermissionsData() call. Implementation: PhoneVerificationPermissionViewModel.trackAppPermissionsPageOpenedEvent() -> PhoneVerificationPermissionsEventTracking.trackAppPermissionsPageOpenedEventV2(). Properties: flow (login_sign_up), number_of_permissions (count), deny_enabled (true), plus individual permission mappings. Event Type: SCREEN. This tracks the permissions request screen during onboarding."
"permissions_pdp_page_deny_clicked","When the user clicks on deny from permissions PDP page. initiation_reason: phone_verification"
"permissions_pdp_page_cta_clicked","When the user clicks on go ahead arrow from permissions PDP page"
"permissions_popup_opened","When the any permission pop up opens up in permissions pdp page (there might be other flows as well for permissions page - please use this event with change in flows and permission type). initiation_reason: phone_verification"
"permissions_popup_cta_clicked","When user clicks on allow/deny from pop-up which is opened post clicking on deny from permissions PDP page. initiation_reason: phone_verification"
"permissions_popup_dismissed","When the user clicks outside of the permissions popup"
"enter_phone_number_screen_open","When the user lands on enter phone number screen. For android â†’ This screen will open up with popup. both are considered as different events"
"enter_phone_number_screen_popup_opened","When the phone number popup is show in android"
"enter_phone_number_screen_continue_clicked","When user clicks continue button on phone number entry screen after entering/selecting phone number. Triggered from EnterMobileFragmentV2.onMobileNumberSubmit() -> EnterMobileViewModelV2.initPhoneVerification() after API response. Implementation: EnterMobileViewModelV2.trackPhoneScreenContinueClicked() -> EventTrackingUtils.trackPhoneScreenContinueClicked() with ENTER_PHONE_NUMBER_SCREEN_CONTINUE_CLICKED. Properties: flow ('login_sign_up'), phone_number_selected ('prefilled' if auto-filled from saved data, 'manual' if user typed), mobile_data ('active'/'inactive' based on mobile data state), phone_permission_given (boolean), sms_permission_given (boolean), success (boolean - true for successful API response), error (error code when success=false), error_message (error details when success=false). Event Type: CTA. Fires in 3 scenarios: Success (API success), Error (API failure with error code/message), Exception (API exception with throwable message). Tracks phone verification initiation result."
"phone_number_submitted","When the user clicks on continue from phone number screen, When the user clicks on any of the phone number from the popup and BE validates the phone number, success indicates the number is validated, error message should display the error message shown to the user"
"smv_verification_initiated","When SMV is initiated for the user and it is counted as an attempt. Properties: flow"
"smv_polling_started","Event should get triggered when we send request"
"smv_verification_completed","Event should be triggered when we get a response for SMV"
"sim_selection_step","When SBP is called and we check dual SIM or show no SIM error. Triggered during device binding flow when SIM detection/selection is needed. Implementation: BindingSetupEventTracking.trackSimSelectionStep() using BindingEventsConstants.SIM_SELECTION_STEP. Properties: skip (boolean), no_sim_found (boolean), num_sims (count), carrier_1 (carrier name), carrier_2 (carrier name), is_phone_available_1 (boolean), is_phone_available_2 (boolean), flow (binding flow), is_sim_binding_skipped (boolean), initiation_reason (trigger reason). Event Type: TRACK. Captures device SIM state and selection requirements during binding process."
"sim_selection_select","When user selects SIM in dual SIM scenario or iOS bottomsheet. Triggered from BindingSelectSimBottomSheet.handleEffects() when user makes SIM selection. Implementation: BindingEventsConstants.Name.SIM_SELECTION_SELECT.trackEvent(). Properties: flow (binding flow), sim_selected (1/2 based on selected SIM), sim_auto_checked (boolean for auto-selection). Event Type: TRACK. Captures user SIM selection decision."
"sim_binding_veryfing_screen_opened","When user lands on SIM binding verification screen. Triggered from BindingSetupFragment.onCreate() during SIM binding flow initialization. Implementation: BindingSetupViewModel.trackSimBindingVerificationScreen() -> BindingSetupEventTracking.trackSimBindingVerifyingScreenOpened() using SIM_BINDING_VERIFYING_SCREEN_OPEN. Properties: flow (binding flow). Event Type: SCREEN. Tracks SIM binding verification screen entry."
"sim_binding_sms_tray_open","When the user lands on send sms screen on ios"
"sim_binding_request","When SIM binding API request is made by frontend. Triggered from BindingSetupViewModel.makeBindDeviceRequestCall() when generating product list from product data. Implementation: BindingSetupEventTracking.trackSimBindingRequest() using SIM_BINDING_REQUEST. Properties: product (binding product like UPI/MINI), flow (binding flow), reinitiate (boolean), is_auto_retry (boolean), is_show_error (boolean), is_sim_binding_skipped (boolean), reason (optional reason). Event Type: TRACK. Fires multiple times for multiple products. Core SIM binding API initiation tracking."
"sim_binding_token_recieved","When UID BE receives the token and VMN information that needs to be sent to the FE. In case of parallel sim binding this event needs to be called for each product/SMS group separately. Properties: source, duration, token_length, vmn_total, vmn_carrier, vmn_number, success, initiation_reason"
"sim_binding_sms_sent","When SMS sent confirmation is received. Triggered from BindingSetupFragment.onSendSmsSuccessful() after SMS sending verification. Implementation: BindingSetupViewModel.checkAndUpdateSmsSuccessStatus() -> BindingSetupEventTracking.trackSimBindingMsgSent() using SIM_BINDING_SMS_SENT. Properties: product (binding product), duration (time since SMS start), is_mandatory (boolean), vmn_total (total VMN count), vmn_sent (sent VMN count), flow (binding flow), is_sent_check_possible (boolean), is_from_fallback_otp (boolean for OTP fallback). Event Type: TRACK. Tracks successful SMS transmission confirmation. If this event is missing in users jouney then it mean that user's device is not able send SMS, maybe because of an expired sms pack"
"sim_binding_polling_start","When SIM binding status polling begins. Triggered from BindingSetupViewModel.startBindStatusCheck() -> logPollingStart(). Implementation: BindingSetupEventTracking.trackSimBindingPollingStart() using SIM_BINDING_POLLING_START. Properties: duration (time since request start), product (list of binding products), mandatory (mandatory products list), optional (optional products list), flow (binding flow). Event Type: TRACK. Initiates status polling for SIM binding completion verification."
"sim_binding_sms_delivered","When SMS delivery confirmation received (Android only). Triggered from BindingSetupFragment.onDeliveredSmsSuccessful() when delivery receipt is received. Implementation: BindingSetupViewModel.triggerDeliveredEvent() -> BindingSetupEventTracking.trackSimBindingMsgDelivered() using SIM_BINDING_MSG_DELIVERED. Properties: product (binding product), duration (time since SMS start), is_mandatory (boolean), vmn_total (total VMN count), vmn_delivered (delivered count), flow (binding flow). Event Type: TRACK. Android-specific SMS delivery confirmation tracking."
"sim_binding_terminal_state","When SIM binding reaches terminal state (success/failure). Triggered from BindingSetupViewModel.triggerPollingTerminateEvent() when product reaches final status. Implementation: BindingSetupEventTracking.trackSimBindingTerminalState() using SIM_BINDING_TERMINAL_STATE. Properties: duration (total time from request start), product (binding product), is_mandatory (boolean), response (success/failed status), failure_reason (error details if failed), flow (binding flow), is_sim_binding_skipped (boolean), remaining_attempts (retry count). Event Type: TRACK. Captures final SIM binding outcome for each product."
"otp_page_opened","When user lands on OTP verification screen across multiple flows (mobile/email/MPIN verification). Triggered from fragment onViewCreated() lifecycle method. Implementation: Auth: OtpValidateFragment.onViewCreated() -> OtpValidateViewModel.trackOtpPageOpened() with AuthEvents.OTP_PAGE_OPENED. MPIN: Uses MpinEventsConstants.MPIN_OTP_PAGE_OPENED. Borrow: Uses BorrowAnalyticsHelper.EVENT_OTP_PAGE_OPENED. Properties: type (analytics type from source), flow (analytics flow from source), source (originating screen/context). Event Type: PAGE_OPEN. Universal OTP entry tracking across all product flows."
"otp_delivered","when otp is delivered to the customer"
"otp_entered","When the user enters 4 digits of OTP and we get a validation response"
"otp_validated","When BE validates the entered OTP"
"otp_page_resend_clicked","When the user clicks on resend in OTP screen"
"phone_verification_complete","When we have validated the phone number"
"email_verification_screen_opened","When the user lands on email verification screen, This is coupled with below event where we auto open google popup"
"google_account_popup_opened","When google account popup is opened"
"google_account_popup_dismissed","When the google account pop up is dismissed"
"continue_with_google_mail_clicked","When the user clicks on continue with google in email_verification screen"
"email_submitted","When the user manually enters email and clicks on the go ahead arrow or When the user selects prefilled google account from the popup"
"email_validated","When BE sends validation response to email verification"
"duplicate_email_bottomsheet_opened","When the duplicate email pop up is shown post continuing on email"
"duplicate_email_bottomsheet_cta_clicked","When the user clicks on update email cta or login using different phone number"
"confirm_name_page_opened","When the user lands on name page"
"invite_code_apply_clicked","When the user clicks on invite_code_apply"
"confirm_name_continue_clicked","When the user clicks on continue in name page"
"mpin_screen_opened","When user lands on MPIN screen across different flows (set/change/verify during login). Triggered from MPIN UI components during screen initialization. Implementation: MpinEventTracking.trackMpinSetScreenOpened(), trackMpinVerifyScreenOpened(), etc. using MpinEventsConstants.MPIN_SCREEN_OPENED. Properties: flow (mpin_flow_type like set/verify/change), screen (set/verify context). Event Type: PAGE_OPEN. Tracks MPIN interaction entry points across all scenarios."
"login_with_biometric_cta_clicked","When the user clicks on Login with touchID/Face ID"
"mpin_screen_mpin_entered","When user enters MPIN digits. Triggered after user completes MPIN input. Implementation: MpinEventTracking.trackMpinSetScreenEntered() using MpinEventsConstants.MPIN_SCREEN_MPIN_ENTERED. Properties: flow (mpin_flow), screen (set/verify). Event Type: TRACK. Captures MPIN input completion across set and verify flows."
"mpin_validated","When BE validates the entered MPIN"
"mpin_verify_forgot_mpin_clicked","when the user clicks on forgot mpin from mpin verify screen"
"mpin_reset_card_details_page_opened","When the user lands on mpin reset card details page"
"mpin_reset_card_details_page_continue_clicked","when the user fills card details and clicks continue on reset mpin card details page"
"mpin_reset_card_details_page_selfie_clicked","when the user clicks on lost card from mpin reset card details page"
"mpin_reset_selfie_bottomsheet_opened","When the selfie bottom sheet opens up on mpin reset flow"
"mpin_selfie_bottomsheet_continue_clicked","When the user clicks on continue from selfie bottom sheet"
"selfie_page_opened","When selfie capture page opens in MPIN reset flow. Implementation: MpinEventTracking using MpinEventsConstants.MPIN_SELFIE_PAGE_OPENED. Used specifically for MPIN reset via selfie verification. Properties: flow (mpin_reset), selfie_context. Event Type: PAGE_OPEN. Part of alternative MPIN recovery flow."
"selfie_captured_page_confirm","When the user clicks on selfie capture"
"mpin_reset_waiting_page_opened","When the user selfie is validated by KYC ops"
"mpin_verify_not_you_clicked","when the user clicks on not you from mpin verify page"
"mpin_verify_not_you_bottomsheet_opened","when the not you bottomsheet opens up"
"mpin_verify_not_you_bottomsheet_cta_clicked","when the user clicks on any cta in not you bottomsheet"
"op_back","when the user clicks press system back during signup or login flow"
"exit_bottomsheet_opened","When the exit bottomsheet opens up"
"exit_bottomsheet_cta_clicked","When the user clicks on exit bottom sheet cta"
"sim_selection_cta","When user clicks Confirm CTA in SIM selection bottomsheet. Only fires if bottomsheet is shown. Properties: flow (binding flow), initiation_reason (phone_verification). Event Type: TRACK. SIM selection confirmation tracking."
"ios_bottomsheet_opened","When the iOS bottomsheet opens telling the user that they need to send a message. Properties: flow, initiation_reason"
"ios_bottomsheet_cta_clicked","When the user clicks on the CTA on the bottomsheet. Properties: flow, initiation_reason"
"sim_binding_initiation","When UID BE sends the information to UID FE about the various products for which Sim Binding needs to be done. Properties: source, product, mandatory, optional, initiation_reason"
"ios_sms_controller_opened","When the SMS controller is opened for the user on iOS to send the message. In case of multiple SMSs, this needs to be triggered multiple times. Properties: flow, product, vmn_total, is_mandatory, initiation_reason"
"ios_sms_controller_closed","When the control comes back from the message controller. In case of multiple SMSs this will be triggered multiple times. Properties: flow, product, duration, success, is_mandatory, initiation_reason"
"sim_binding_error_screen_opened","When SIM binding error screen is displayed. Triggered from BindingSetupFragment.showBindingErrorUi() when SIM binding encounters errors. Implementation: BindingSetupViewModel.triggerSimBindingErrorScreen() -> BindingSetupEventTracking.trackSimBindingErrorScreen() using SIM_BINDING_ERROR_SCREEN. Properties: error_reason (specific error code like GENERIC_ERROR, RATE_LIMIT_ERROR, THREAT_DETECTED), flow (binding flow). Event Type: TRACK. Captures SIM binding error scenarios and their reasons."
"sim_binding_response","When UID BE gets a successful response from the VMN for the sim binding of the specific user OR if there is a reason for SBP to fail the SB. In case of parallel sim binding, this event will be triggered multiple times for multiple products. Properties: response, response_source, failure_reason, product, is_sim_binding_skipped, remaining_attempts, is_mandatory, initiation_reason"
"sim_binding_invalidated","Whenever the sim binding is invalidated. Either because of FE invalidate reasons OR because calling party invalidates an existing sim binding because the current sim binding is not valid (device parameters not matched). Properties: product, invalidate_reason, initiation_reason"
"sim_binding_cache_enhancement_bottomsheet_opened","When the sim binding back end call is not allowed as the FE caching says that there has been 3 unsuccessful attempts of sim binding. Properties: is_valid - true/false"
"sim_binding_otp_triggered","When OTP is triggered by BE for sim binding."
"sim_binding_otp_read","When SIM binding OTP is read by device. Triggered from SendCheckOTPListener when OTP SMS is received during SIM binding. Implementation: BindingSetupViewModel.handleFallbackOTP() -> BindingSetupEventTracking.trackSimBindingOTPRead() using SIM_BINDING_OTP_READ. Properties: sender (SMS sender address), segments (number of SMS segments), is_otp_found (boolean if OTP was extracted), product_hash (product hash for validation). Event Type: TRACK. Captures OTP detection during SIM binding fallback flow. If this event is missing in the user jouney then it means that users device is not receiving the OTP needed for sim binding completion"
"sim_binding_otp_validated","When SIM binding OTP is validated by FE using BE API. Triggered from BindingSetupViewModel.handleFallbackOTP() after OTP validation API call. Implementation: BindingSetupEventTracking.trackSimBindingOTPValidated() using SIM_BINDING_OTP_VALIDATED. Properties: is_valid (boolean validation result), failure_reason (error message if validation failed), error_code (API error code if failed). Event Type: TRACK. Captures OTP validation results during SIM binding."
"sim_binding_threat_detected","When SIM binding security threat is detected. Triggered from BindingSetupViewModel.isThreatDetected() when security checks identify threats. Implementation: BindingSetupEventTracking.trackSimBindingThreatDetected() using SIM_BINDING_THREAT_DETECTED. Properties: action (threat action like 'block'/'log'), threat_name (threat identifier), threat_code (numeric threat code). Event Type: TRACK. Security monitoring for SIM binding process."
"sim_binding_play_integrity_check_start","When Play Integrity check begins for SIM binding. Triggered from BindingSetupViewModel.startPlayProtectCheck() before token generation. Implementation: BindingSetupEventTracking.trackPlayIntegrityCheckStart() using SIM_BINDING_PLAY_INTEGRITY_CHECK_START. Properties: None. Event Type: TRACK. Android Play Integrity security verification initiation."
"sim_binding_play_integrity_token_error","When Play Integrity token generation fails. Triggered from PlayProtectCheck when token generation encounters errors. Implementation: BindingSetupEventTracking.trackPlayIntegrityTokenError() using SIM_BINDING_PLAY_INTEGRITY_TOKEN_ERROR. Properties: error_reason (error message). Event Type: TRACK. Android security token generation failure tracking."
"sim_binding_play_integrity_token_generated","When Play Integrity token is successfully generated. Triggered from PlayProtectCheck after successful token creation. Implementation: BindingSetupEventTracking.trackPlayIntegrityTokenGenerated() using SIM_BINDING_PLAY_INTEGRITY_TOKEN_GENERATED. Properties: None. Event Type: TRACK. Android security token generation success tracking."
"sim_binding_play_integrity_check_complete","When Play Integrity check completes. Triggered from BindingSetupViewModel.startPlayProtectCheck() after API verification completes. Implementation: BindingSetupEventTracking.trackPlayIntegrityCheckComplete() using SIM_BINDING_PLAY_INTEGRITY_CHECK_COMPLETE. Properties: is_success (boolean result), error_code (API error code if failed), error_reason (error message if failed). Event Type: TRACK. Android Play Integrity verification completion tracking."
"sim_binding_sms_forwarding_detected","When SMS forwarding is detected during SIM binding. Triggered from BindingSetupViewModel.checkForSmsForwarding() when SMS forwarding is detected. Implementation: BindingSetupEventTracking.trackSmsForwardingDetected() using SIM_BINDING_SMS_FORWARDING_DETECTED. Properties: product (binding flow), flow (binding flow), forwarding_type (type of forwarding detected). Event Type: TRACK. SMS security monitoring during SIM binding."
"device_checksum_mismatch","When there is mismatch between the checksum sent by FE to the BE. Properties: error_reason"
"device_token_mismatch","When there is mismatch between the device token sent by FE to the BE. Properties: flow, error_reason"
"sim_binding_no_sim_found","When we are blocking sim binding/ txn when there is no sim in iOS device."
"sim_binding_status_checked","During txn, we are checking from where sim binding status was checked from, whether it was db or from cache. Properties: method"
"smv_terminal_state","When device verification is successful via SMV. Properties: response, failure reason, flow"
"smv_response","Response of BE for SMV. Properties: response, failure_reason, flow"
"sbp_attempt_increase","When sbp attempt count is increased by 1 as the attempt to do sbp was not meeting the pre-requisite. Properties: reason"
"smv_webhook_polling_response","When smv webhook polling is completed. Properties: response, flow"
"smv_status_polling_response","When smv status polling is completed. Properties: response, flow"
"app_permissions_page_opened","initiation_reason: phone_verification"
"app_permissions_page_lets_go_clicked","initiation_reason: phone_verification"
"app_permissions_page_deny_clicked","initiation_reason: phone_verification"
"permissions_deny_error_opened","initiation_reason: phone_verification"
"app_permissions_deny_dialogue_opened","initiation_reason: phone_verification"
"app_permissions_deny_dialogue_clicked","initiation_reason: phone_verification. Properties: cta_clicked: allow/deny"
"permissions_popup_allow_clicked", "initiation_reason: phone_verification"
"sim_binding_message_read","When any SMS message is received during SIM binding. Triggered from SendCheckOTPListener when SMS is received during binding process. Implementation: BindingSetupViewModel.trackSimBindingMessageReceived() -> BindingSetupEventTracking.trackSimBindingMessageRead() using SIM_BINDING_MESSAGE_READ. Properties: sender (SMS sender address), segments (number of SMS segments). Event Type: TRACK. General SMS reception tracking during SIM binding."
"sim_binding_sms_content_provider_check_failed","When SMS content provider sent check fails during SIM binding. Triggered from BindingSetupFragment.onSendSmsSuccessful() when sent check verification fails. Implementation: BindingSetupViewModel.triggerSentContentProviderSentCheckFailedEvent() -> BindingSetupEventTracking.trackSimBindingSmsContentProviderCheckFailedEvent() using SIM_BINDING_SMS_CONTENT_PROVIDER_CHECK_FAILED. Properties: product (binding product), duration (time since SMS start), is_mandatory (boolean), vmn_total (total VMN count), vmn_sent (sent VMN count), flow (binding flow). Event Type: TRACK. SMS delivery verification failure tracking."
"session_token_fetch_failed","When session token generation fails during user authentication flows. Triggered from SessionManagementRepository.onApiError() when generateUserSession() API call fails or throws exception. Implementation: AppSessionManagerEventTracker.trackSessionTokenFetchFailed() using SESSION_TOKEN_FETCH_FAILED. Properties: access_token_available (boolean if user has existing access token), retries (current retry count), source ('MPIN' or 'BIOMETRIC' based on AuthMode), status_code (HTTP error code, -1 for exceptions), error_message (API error message or exception message), ray_id (CloudFlare ray ID from headers), ip_address (device IP address). Event Type: TRACK. Triggers when: session creation during app startup (AuthMode.BIOMETRIC), MPIN verification flows (AuthMode.MPIN), or biometric authentication. Critical for session management debugging and monitoring authentication failures. If session token generation fails the user will not be able to load data in the app."
"fire_result_page_opened","Game result screen analytics event. Triggered when: 1) User completes Fire/Bonfire games in Rewards module, 2) Game result screen is displayed to user, 3) After getting leaderboard rank for Bonfire games. Properties: status (win/fail/leader), create_bonfire_cta (boolean), payment_type (fire/bonfire), cross_enabled (boolean), flow_type (source flow). Purpose: Track game completion rates, user engagement with results, effectiveness of different game types. Screens: GameResultFragment, GameResultViewModel.handleFireGameResult(). Scenarios: Regular Fire game completion, Bonfire game with leaderboard, retry scenarios after loss."
"monies_page_opened","Rewards/Cashback main page access event. Triggered when: 1) User opens Rewards tab from bottom navigation, 2) Direct navigation to cashback section, 3) Deep link access to rewards page. Properties: user_has_cashback (boolean), total_cashback_amount (string), has_pending_games (boolean), source (tab/deeplink/notification). Purpose: Track rewards engagement, measure cashback visibility impact, understand user interest in gaming features. Screens: MoniesFragment, RewardsHomeViewModel. Scenarios: Regular tab access, post-transaction rewards check, notification-driven access."
"game_started","Game initiation tracking event. Triggered when: 1) User clicks 'Play' button on Fire game, 2) Bonfire game session begins, 3) Mini-games within rewards are launched. Properties: game_type (fire/bonfire/mini), user_balance (amount), game_stakes (amount), entry_source (home/rewards/notification). Purpose: Monitor gaming feature adoption, track engagement patterns, measure game conversion rates. Screens: GameViewModel, FireGameFragment. Scenarios: Regular gameplay start, promotional game access, balance-driven gaming."
"monies_redeem_cta_clicked","Cashback redemption initiation event. Triggered when: 1) User clicks redeem button for available cashback, 2) Quick redeem options are selected, 3) Bulk redemption is initiated. Properties: redemption_amount (string), available_balance (string), redemption_type (quick/full/partial), source_screen (home/rewards/notification). Purpose: Track redemption behavior, measure cashback utilization rates, identify optimal redemption amounts. Screens: RewardsRedemptionFragment, MoniesViewModel. Scenarios: Full balance redemption, partial withdrawals, promotional redemptions."
"app_phone_authentication","Phone number authentication event. Triggered when: 1) User enters phone number during login/signup, 2) Phone verification is initiated via OTP, 3) SIM-based authentication is attempted. Properties: auth_method (otp/sim), phone_number_length (int), is_new_user (boolean), verification_type (manual/auto), country_code (string). Purpose: Track authentication success rates, monitor fraud patterns, optimize verification flows. Screens: AuthenticationFragment, PhoneVerificationViewModel. Scenarios: New user signup, existing user login, account recovery, SIM change verification."
"google_mail_login_clicked","Google authentication selection event. Triggered when: 1) User selects Google login option from auth screen, 2) Gmail account picker is opened, 3) Google OAuth flow is initiated. Properties: is_first_time (boolean), has_existing_account (boolean), auth_source (login/signup), previous_auth_method (phone/email/none). Purpose: Track OAuth adoption, measure authentication preferences, optimize multi-auth flows. Screens: LoginFragment, AuthSelectionViewModel. Scenarios: Quick login preference, new user onboarding, account linking."
"name_enter_page_opened","User name entry screen access event. Triggered when: 1) Name input screen is displayed during onboarding, 2) Profile name update flow is initiated, 3) KYC name verification process begins. Properties: flow_type (onboarding/profile_update/kyc), is_pre_filled (boolean), source_screen (auth/profile/verification), step_number (int). Purpose: Track onboarding completion rates, monitor name verification success, optimize user data collection. Screens: NameEntryFragment, OnboardingViewModel. Scenarios: Initial onboarding, profile completion, KYC requirements, name corrections."
"email_enter_page_opened","Email input screen access event. Triggered when: 1) Email entry screen is displayed during registration, 2) Email update flow in profile, 3) Business email verification for merchants. Properties: flow_type (personal/business), is_pre_filled (boolean), source (onboarding/profile/kyc), validation_required (boolean). Purpose: Track email collection rates, monitor business user onboarding, optimize data capture flows. Screens: EmailEntryFragment, ProfileViewModel. Scenarios: Personal account setup, business account creation, profile updates." 
"Event Name","Event Description"
"fire_result_page_opened","Game result screen analytics event. Triggered when: 1) User completes Fire/Bonfire games in Rewards module, 2) Game result screen is displayed to user, 3) After getting leaderboard rank for Bonfire games. Properties: status (win/fail/leader), create_bonfire_cta (boolean), payment_type (fire/bonfire), cross_enabled (boolean), flow_type (source flow). Purpose: Track game completion rates, user engagement with results, effectiveness of different game types. Screens: GameResultFragment, GameResultViewModel.handleFireGameResult(). Scenarios: Regular Fire game completion, Bonfire game with leaderboard, retry scenarios after loss."
"sim_binding_initiation","SIM binding initiation analytics event (equivalent to sim_binding_request). Triggered when: 1) Device binding API request is initiated after user SIM selection, 2) Automatic retry attempts are made for failed binding requests, 3) Re-initiation of binding process due to SIM change/toggle/network issues. Properties: product (UPI/MINI/SLICE), flow (authentication flow), reinitiate (boolean), is_auto_retry (boolean), is_show_error (boolean), reason (failure reason). Purpose: Track SIM binding success rates, identify failure patterns, monitor security verification flow. Screens: BindingSetupViewModel, SIM selection flows. Scenarios: Initial binding during auth, retry attempts, SIM switching, network failures."
"monies_page_opened","Rewards/Cashback main page access event. Triggered when: 1) User opens Rewards tab from bottom navigation, 2) Direct navigation to cashback section, 3) Deep link access to rewards page. Properties: user_has_cashback (boolean), total_cashback_amount (string), has_pending_games (boolean), source (tab/deeplink/notification). Purpose: Track rewards engagement, measure cashback visibility impact, understand user interest in gaming features. Screens: MoniesFragment, RewardsHomeViewModel. Scenarios: Regular tab access, post-transaction rewards check, notification-driven access."
"game_started","Game initiation tracking event. Triggered when: 1) User clicks 'Play' button on Fire game, 2) Bonfire game session begins, 3) Mini-games within rewards are launched. Properties: game_type (fire/bonfire/mini), user_balance (amount), game_stakes (amount), entry_source (home/rewards/notification). Purpose: Monitor gaming feature adoption, track engagement patterns, measure game conversion rates. Screens: GameViewModel, FireGameFragment. Scenarios: Regular gameplay start, promotional game access, balance-driven gaming."
"monies_redeem_cta_clicked","Cashback redemption initiation event. Triggered when: 1) User clicks redeem button for available cashback, 2) Quick redeem options are selected, 3) Bulk redemption is initiated. Properties: redemption_amount (string), available_balance (string), redemption_type (quick/full/partial), source_screen (home/rewards/notification). Purpose: Track redemption behavior, measure cashback utilization rates, identify optimal redemption amounts. Screens: RewardsRedemptionFragment, MoniesViewModel. Scenarios: Full balance redemption, partial withdrawals, promotional redemptions."
"app_phone_authentication","Phone number authentication event. Triggered when: 1) User enters phone number during login/signup, 2) Phone verification is initiated via OTP, 3) SIM-based authentication is attempted. Properties: auth_method (otp/sim), phone_number_length (int), is_new_user (boolean), verification_type (manual/auto), country_code (string). Purpose: Track authentication success rates, monitor fraud patterns, optimize verification flows. Screens: AuthenticationFragment, PhoneVerificationViewModel. Scenarios: New user signup, existing user login, account recovery, SIM change verification."
"google_mail_login_clicked","Google authentication selection event. Triggered when: 1) User selects Google login option from auth screen, 2) Gmail account picker is opened, 3) Google OAuth flow is initiated. Properties: is_first_time (boolean), has_existing_account (boolean), auth_source (login/signup), previous_auth_method (phone/email/none). Purpose: Track OAuth adoption, measure authentication preferences, optimize multi-auth flows. Screens: LoginFragment, AuthSelectionViewModel. Scenarios: Quick login preference, new user onboarding, account linking."
"name_enter_page_opened","User name entry screen access event. Triggered when: 1) Name input screen is displayed during onboarding, 2) Profile name update flow is initiated, 3) KYC name verification process begins. Properties: flow_type (onboarding/profile_update/kyc), is_pre_filled (boolean), source_screen (auth/profile/verification), step_number (int). Purpose: Track onboarding completion rates, monitor name verification success, optimize user data collection. Screens: NameEntryFragment, OnboardingViewModel. Scenarios: Initial onboarding, profile completion, KYC requirements, name corrections."
"otp_page_opened","OTP verification screen display event. Triggered when: 1) SMS OTP screen is shown to user, 2) Phone verification step is reached, 3) Re-authentication requires OTP. Properties: otp_type (sms/call/auto), phone_number_masked (string), retry_count (int), flow_context (login/signup/verification), auto_read_enabled (boolean). Purpose: Track verification completion rates, monitor OTP delivery issues, optimize authentication UX. Screens: OTPFragment, VerificationViewModel. Scenarios: Initial verification, retry attempts, auto-fill scenarios, manual entry."
"email_enter_page_opened","Email input screen access event. Triggered when: 1) Email entry screen is displayed during registration, 2) Email update flow in profile, 3) Business email verification for merchants. Properties: flow_type (personal/business), is_pre_filled (boolean), source (onboarding/profile/kyc), validation_required (boolean). Purpose: Track email collection rates, monitor business user onboarding, optimize data capture flows. Screens: EmailEntryFragment, ProfileViewModel. Scenarios: Personal account setup, business account creation, profile updates."
"sim_binding_request","SIM binding API request tracking event. Triggered when: 1) Device binding API call is made after SIM selection, 2) Automatic retry for failed binding attempts, 3) Re-binding due to SIM changes or network issues. Properties: product (UPI/MINI/SLICE), flow (auth flow type), reinitiate (boolean), is_auto_retry (boolean), is_show_error (boolean), is_sim_binding_skipped (boolean), reason (failure reason). Purpose: Monitor SIM binding success rates, track security verification effectiveness, identify failure patterns for fraud prevention. Screens: BindingSetupViewModel.initiateDeviceBinding(). Scenarios: Initial device binding, retry attempts, SIM switching, network failures, manual re-initiation."
"sim_binding_response","SIM binding API response tracking event. Triggered when: 1) Device binding API response is received (success/failure), 2) Binding validation completes, 3) Security verification result is processed. Properties: product (UPI/MINI/SLICE), flow (authentication flow), is_success (boolean), error_code (string), response_time_ms (long), binding_status (bound/failed/pending). Purpose: Monitor API performance, track binding success rates, identify technical issues in security verification. Screens: BindingSetupViewModel response handlers. Scenarios: Successful binding completion, API failures, timeout scenarios, security validation errors."
"sim_binding_validation","SIM binding validation tracking event. Triggered when: 1) Device-SIM binding is validated against backend, 2) Security checks are performed on binding status, 3) Binding integrity is verified during transactions. Properties: validation_result (valid/invalid/expired), product_type (UPI/MINI/SLICE), check_type (transaction/periodic/manual), last_validation_time (timestamp). Purpose: Ensure binding security, monitor validation effectiveness, track security breach attempts. Screens: Security validation services, transaction flows. Scenarios: Transaction security checks, periodic validation, manual verification, security audits."
"mini_onboarding_started","Mini account onboarding initiation event. Triggered when: 1) User begins MINI savings account creation, 2) Quick onboarding flow is started from UPI, 3) Simplified account setup is initiated. Properties: source (upi/direct/referral), user_type (new/existing), has_existing_accounts (boolean), onboarding_version (v1/v2), flow_type (full/minimal). Purpose: Track mini account adoption, measure onboarding funnel effectiveness, optimize simplified flows. Screens: MiniOnboardingFragment, OnboardingViewModel. Scenarios: UPI-driven onboarding, direct account creation, referral-based signup."
"pan_enter_page_opened","PAN card entry screen access event. Triggered when: 1) PAN input screen is displayed during KYC, 2) Tax compliance verification begins, 3) Financial document collection is initiated. Properties: flow_type (kyc/tax/compliance), is_mandatory (boolean), source_screen (onboarding/profile/transaction), pre_fill_available (boolean). Purpose: Track KYC completion rates, monitor compliance requirements, optimize document collection UX. Screens: PANEntryFragment, KYCViewModel. Scenarios: Mandatory KYC during onboarding, tax compliance verification, account upgrade requirements."
"selfie_capture_initiated","Selfie capture process start event. Triggered when: 1) Camera is opened for selfie during KYC, 2) Face verification process begins, 3) Document verification requires selfie. Properties: capture_type (kyc/verification/update), camera_permission (granted/denied), quality_check_enabled (boolean), retry_count (int). Purpose: Track verification completion rates, monitor camera issues, optimize face recognition flows. Screens: SelfieFragment, BiometricViewModel. Scenarios: KYC selfie capture, face verification, document matching, retry attempts."
"spend_analytics_opened","Spend analysis screen access event. Triggered when: 1) User opens spending insights tab, 2) Monthly spend analysis is viewed, 3) Category-wise breakdown is accessed. Properties: analysis_period (monthly/quarterly/yearly), has_data (boolean), category_count (int), source (tab/notification/widget). Purpose: Track financial insights engagement, measure analytics feature adoption, understand user financial behavior. Screens: SpendAnalyticsFragment, AnalyticsViewModel. Scenarios: Regular spending review, category analysis, budget tracking, financial planning."
"account_switch_clicked","Account switching action event. Triggered when: 1) User switches between linked accounts, 2) Account selector is used in spend analysis, 3) Multi-account view is toggled. Properties: from_account (account_type), to_account (account_type), account_count (int), switch_reason (analysis/transaction/preference). Purpose: Track multi-account usage patterns, measure account preference, optimize account management UX. Screens: AccountSelectorBottomSheet, MultiAccountViewModel. Scenarios: Analysis account switching, transaction account selection, preference-based switching."
"category_analysis_viewed","Spending category analysis view event. Triggered when: 1) User drills down into specific spend categories, 2) Category-wise breakdown is opened, 3) Detailed category insights are accessed. Properties: category_name (string), spend_amount (amount), transaction_count (int), period (monthly/weekly), comparison_enabled (boolean). Purpose: Understand category-wise spending patterns, track insights engagement, optimize financial categorization. Screens: CategoryAnalysisFragment, SpendDetailsViewModel. Scenarios: Category deep-dive, spending pattern analysis, financial insights exploration."
"api_error_occurred","API failure tracking event. Triggered when: 1) Backend API calls fail with errors, 2) Network timeouts occur during requests, 3) Server errors impact user experience. Properties: api_endpoint (string), error_code (int), error_message (string), retry_count (int), request_duration_ms (long). Purpose: Monitor API reliability, track error patterns, identify backend issues for quick resolution. Screens: All API-dependent screens. Scenarios: Network failures, server errors, timeout issues, rate limiting."
"background_sync_completed","Background data synchronization event. Triggered when: 1) App syncs data while in background, 2) Periodic data refresh completes, 3) Real-time updates are processed. Properties: sync_type (periodic/realtime/manual), data_types (accounts/transactions/rewards), sync_duration_ms (long), records_synced (int). Purpose: Monitor sync reliability, optimize background performance, track data freshness. Screens: Background services, sync managers. Scenarios: Periodic sync, real-time updates, manual refresh, app foreground transitions."
"upi_universal_send_screen_open","UPI Send screen access event. Triggered when: 1) User opens UPI send money screen, 2) Universal send interface is displayed, 3) Payment initiation screen loads. Properties: account_type (bank/wallet), contact_permission_present (boolean), total_tiles (int), flow (send/request), is_send_v2 (boolean). Purpose: Track UPI send feature usage, monitor onboarding effectiveness, measure payment flow adoption. Screens: UPISendV2Fragment, SendFlowViewModel. Scenarios: Money transfer initiation, contact-based sending, QR-based payments."
"upi_proceed_to_pay","UPI payment initiation event. Triggered when: 1) User clicks proceed/pay button in UPI flow, 2) Payment authentication begins, 3) Transaction is submitted for processing. Properties: upi_transaction_type (account_type), payment_flow (send/scan/request), debit_source (account), beneficiary_checked (boolean), payment_auth_mode (pin/biometric), amount_bucket (range). Purpose: Track payment conversion rates, monitor authentication preferences, optimize payment UX. Screens: Payment confirmation screens, UPI flow ViewModels. Scenarios: Regular payments, QR transactions, beneficiary payments, repeat transactions."
"upi_transaction_completed","UPI transaction completion event. Triggered when: 1) UPI payment is successfully completed, 2) Transaction status is confirmed, 3) Payment receipt is generated. Properties: txn_status (success/failed/pending), amount (transaction_amount), payee_name (recipient), payee_vpa (UPI_ID), payment_flow (send/scan). Purpose: Track transaction success rates, monitor payment reliability, measure UPI adoption effectiveness. Screens: Transaction status screens, payment completion flows. Scenarios: Successful payments, failed transactions, pending status, payment confirmations."
"upi_qr_scan_initiated","UPI QR code scanning start event. Triggered when: 1) QR scanner camera is opened, 2) Payment QR scanning begins, 3) Intent-based QR processing starts. Properties: account_type (scanning_account), scan_source (camera/gallery), flash_enabled (boolean), scan_type (payment/merchant). Purpose: Track QR payment adoption, monitor scanning success rates, optimize QR recognition accuracy. Screens: QRScannerFragment, ScanViewModel. Scenarios: Merchant payments, P2P QR scanning, intent handling, quick payments."
"upi_scan_payment_details_opened","UPI scan payment details display event. Triggered when: 1) Payment details screen opens after QR scan, 2) Scanned merchant info is displayed, 3) Amount confirmation screen is shown. Properties: account_type (selected_account), debit_source (bank_name), amount_prepopulated (boolean), merchant_category (type). Purpose: Track QR scan success rates, monitor payment confirmation flow, optimize merchant payment UX. Screens: PaymentDetailsFragment, ScanPaymentViewModel. Scenarios: Merchant QR payments, amount confirmation, payment verification."
"transaction_loading_page_opened","Transaction status loading screen event. Triggered when: 1) Payment processing screen is displayed, 2) Transaction status is being fetched, 3) Loading state during payment confirmation. Properties: transaction_type (UPI/bank/wallet), flow (send/receive/request), estimated_time (seconds), retry_enabled (boolean). Purpose: Track payment processing times, monitor loading experience, optimize transaction feedback UX. Screens: TransactionLoadingFragment, StatusViewModel. Scenarios: Payment processing, status checking, retry scenarios."
"transaction_status_page_opened","Transaction status result screen event. Triggered when: 1) Final transaction status is displayed, 2) Payment success/failure screen opens, 3) Transaction receipt is shown. Properties: status (success/failed/pending), flow (payment_type), cta_options (share/done/retry), marketing_card_shown (boolean). Purpose: Track transaction outcomes, measure post-payment engagement, optimize result screen actions. Screens: TransactionStatusFragment, StatusResultViewModel. Scenarios: Payment completion, failure handling, receipt generation."
"transaction_done_clicked","Transaction completion action event. Triggered when: 1) User clicks Done button on transaction status, 2) Payment flow is completed and dismissed, 3) User returns to main app after payment. Properties: status (final_status), flow (payment_type), action (done/continue), time_spent (seconds). Purpose: Track payment flow completion, measure user satisfaction, optimize post-payment experience. Screens: Transaction status screens. Scenarios: Successful payment completion, failure acknowledgment, flow dismissal."
"borrow_enter_amount_page_opened","Borrow amount entry screen event. Triggered when: 1) User opens loan amount selection screen, 2) Credit limit utilization interface displays, 3) Borrowing flow is initiated. Properties: available_limit (amount), min_amount (amount), max_amount (amount), source (home/emergency/specific_need). Purpose: Track borrowing feature adoption, monitor credit utilization patterns, optimize lending UX. Screens: BorrowAmountFragment, BorrowViewModel. Scenarios: Credit access, emergency borrowing, planned expenses."
"borrow_enter_amount_continue_clicked","Borrow amount confirmation event. Triggered when: 1) User confirms borrowing amount, 2) Proceeds to loan terms screen, 3) Amount validation passes. Properties: selected_amount (amount), available_limit (amount), utilization_percentage (percentage), purpose (emergency/purchase/bill). Purpose: Track borrowing behavior, measure amount selection patterns, monitor credit demand. Screens: Amount confirmation flows. Scenarios: Amount confirmation, terms acceptance, credit utilization."
"borrow_details_page_opened","Loan details screen access event. Triggered when: 1) Borrowing terms and conditions screen opens, 2) Loan agreement details are displayed, 3) Interest rate and terms are shown. Properties: loan_amount (amount), interest_rate (percentage), tenure (months), emi_amount (amount). Purpose: Track lending transparency, monitor terms acceptance rates, optimize loan disclosure UX. Screens: BorrowDetailsFragment, LoanTermsViewModel. Scenarios: Terms review, loan agreement, interest calculation."
"borrow_details_confirm_clicked","Loan terms acceptance event. Triggered when: 1) User accepts loan terms and conditions, 2) Borrowing agreement is confirmed, 3) Loan disbursement is initiated. Properties: loan_amount (amount), terms_accepted (boolean), digital_signature (boolean), disbursement_method (bank/wallet). Purpose: Track lending conversion rates, monitor legal compliance, measure loan acceptance patterns. Screens: Terms confirmation screens. Scenarios: Loan acceptance, agreement confirmation, disbursement initiation."
"payment_bottomsheet_opened","Payment method selection event. Triggered when: 1) Payment options bottomsheet is displayed, 2) Account selection for payments opens, 3) Payment mode picker is shown. Properties: available_accounts (count), default_account (type), payment_type (UPI/bank/wallet), source_flow (send/borrow/bill). Purpose: Track payment method preferences, optimize account selection UX, monitor payment funnel. Screens: PaymentBottomSheet, PaymentSelectorViewModel. Scenarios: Payment method selection, account switching, payment options."
"app_permissions_page_opened","App permissions request screen event. Triggered when: 1) Permission request screen is displayed, 2) System permissions are required for features, 3) Mandatory permissions flow begins. Properties: permission_type (camera/location/contacts/sms), flow (onboarding/feature_access), is_mandatory (boolean), retry_count (int). Purpose: Track permission grant rates, monitor feature adoption blockers, optimize permission UX. Screens: PermissionsFragment, PermissionViewModel. Scenarios: Initial setup, feature access, permission recovery."
"permissions_popup_opened","System permission dialog event. Triggered when: 1) Native system permission dialog is shown, 2) Runtime permission is requested, 3) Permission grant/deny choice is presented. Properties: permission_type (specific_permission), previous_denied (boolean), app_context (feature_name), flow_stage (onboarding/usage). Purpose: Track system permission success rates, monitor user trust patterns, optimize permission timing. Screens: System permission dialogs. Scenarios: First-time requests, re-permission, critical feature access."
"purple_ba_bottomsheet_open","Bank account selection bottomsheet event. Triggered when: 1) Account selection bottomsheet opens during payments, 2) Bank account picker is displayed, 3) Source account selection for transactions. Properties: available_accounts (list), pre_selected_account (type), payment_flow (send/scan), force_selection_reason (string). Purpose: Track account selection patterns, monitor multi-account usage, optimize payment source selection. Screens: AccountSelectionBottomSheet. Scenarios: Payment account selection, account switching, forced account selection."
"bottomsheet_cta_clicked","Bottomsheet action button event. Triggered when: 1) Action buttons in bottomsheets are clicked, 2) User interactions with modal dialogs, 3) Confirmation actions in overlays. Properties: flow (bottomsheet_context), cta_type (primary/secondary), action_taken (continue/cancel/select), source_screen (parent_screen). Purpose: Track bottomsheet engagement, monitor user decision patterns, optimize modal UX design. Screens: Various bottomsheet components. Scenarios: Action confirmations, selections, dismissals."
"hns_icon_purple_screen_clicked","Help and Support icon click event. Triggered when: 1) Help icon is clicked from payment screens, 2) Support access during transactions, 3) User seeks help during payment flows. Properties: flow (payment_context), screen_type (send/scan/status), current_step (amount/confirmation/processing). Purpose: Track support needs during payments, identify user confusion points, optimize help accessibility. Screens: Payment flow screens with HNS integration. Scenarios: Payment assistance, transaction help, process guidance."
"upi_cl_triggered","UPI Common Library (CL) activation event. Triggered when: 1) NPCI Common Library is initialized for payments, 2) Secure payment processing begins, 3) CL-based authentication is triggered. Properties: controls (security_config), source (payment_trigger), after_cl (processing_stage), salt/trust (security_params). Purpose: Monitor secure payment processing, track CL integration effectiveness, ensure payment security compliance. Screens: Secure payment processing layers. Scenarios: High-value payments, secure authentication, regulatory compliance."
"tpap_logger","Third Party App Provider (TPAP) logging event. Triggered when: 1) TPAP integration issues occur, 2) Payment processing errors need tracking, 3) Third-party payment failures require logging. Properties: message (error_description), type (error_type), code (error_code), throwable (exception_details). Purpose: Monitor third-party payment reliability, track integration issues, debug payment processing problems. Screens: TPAP integration layers. Scenarios: Payment processing errors, integration failures, debugging scenarios."
"op_vcip_land","Video KYC initiation event. Triggered when: 1) Video KYC landing screen is displayed, 2) User enters video verification flow, 3) VCIP (Video Customer Identification Process) begins. Properties: module (VCIP/DIGIO), state (landing/connecting), flow_type (onboarding/verification), product (account_type). Purpose: Track video KYC adoption, monitor verification completion rates, optimize video onboarding UX. Screens: VideoKYCFragment, VKYCViewModel. Scenarios: New user verification, compliance requirements, identity validation."
"op_vcip_cq_test","Video KYC connection quality test event. Triggered when: 1) Pre-call network connectivity test begins, 2) Camera and audio quality checks are performed, 3) System readiness verification starts. Properties: internet_check_end_type (started/finished), connection_quality (good/poor), test_duration_ms (long). Purpose: Monitor technical readiness for video calls, track connection issues, optimize pre-call experience. Screens: Connection test screens. Scenarios: Pre-call setup, quality checks, technical validation."
"op_vcip_action_cta","Video KYC action button event. Triggered when: 1) User clicks action buttons during video KYC, 2) CTA interactions in video flow, 3) Navigation actions within VCIP. Properties: cta_action (primary/secondary), cta_type (continue/retry/skip), module_type (selfie/PAN/OTP), screen (current_context). Purpose: Track user engagement in video KYC, monitor flow completion patterns, optimize action placement. Screens: Video KYC action screens. Scenarios: Flow progression, retry attempts, skip actions."
"activity_centre_clicked","Activity center access event. Triggered when: 1) User opens activity center from navigation, 2) Transaction history view is accessed, 3) Activity insights tab is selected. Properties: source (tab/notification/widget), has_data (boolean), filter_applied (boolean), view_type (list/grid). Purpose: Track activity center engagement, monitor transaction review patterns, optimize transaction management UX. Screens: ActivityCenterFragment, AvcViewModel. Scenarios: Regular transaction review, activity exploration, financial tracking."
"activity_centre_search_clicked","Activity center search initiation event. Triggered when: 1) Search icon is clicked in activity center, 2) Transaction search functionality is accessed, 3) Activity filtering begins. Properties: has_recent_searches (boolean), filter_type (amount/date/category), search_context (transaction/activity). Purpose: Track search feature usage, monitor transaction discovery patterns, optimize search functionality. Screens: Activity center search. Scenarios: Transaction lookup, activity filtering, financial search."
"activity_centre_search","Activity center search execution event. Triggered when: 1) Search query is executed in activity center, 2) Search results are displayed, 3) Activity filtering is applied. Properties: search_result (boolean), query_length (int), result_count (int), search_type (text/filter). Purpose: Monitor search effectiveness, track result quality, optimize search algorithms. Screens: Search results. Scenarios: Successful searches, empty results, refined queries."
"avc_page_loaded","Activity center page load completion event. Triggered when: 1) Activity center page finishes loading, 2) Transaction data is successfully fetched, 3) UI rendering is complete. Properties: autopay_shown (boolean), load_time_ms (long), data_source (cache/network), error_count (int). Purpose: Monitor page performance, track loading success rates, optimize data fetching. Screens: ActivityCenterFragment load completion. Scenarios: Initial load, refresh operations, cache hits."
"physical_card_booking_screen_open","Physical card booking screen access event. Triggered when: 1) Card booking interface is opened, 2) Physical card ordering flow begins, 3) Card management section accessed. Properties: flow (card_booking), card_type (debit/credit), user_eligibility (eligible/not_eligible), existing_cards (count). Purpose: Track card ordering adoption, monitor eligibility impact, optimize card management UX. Screens: CardBookingFragment, CardBookingViewModel. Scenarios: New card orders, replacement requests, card upgrades."
"physical_card_booking_screen_action","Physical card booking action event. Triggered when: 1) User takes actions on card booking screen, 2) Order placement buttons are clicked, 3) Card customization options selected. Properties: flow (card_booking), action (order/edit_address/customize), card_type (debit/credit), selection_made (boolean). Purpose: Track booking conversion rates, monitor user preferences, optimize ordering flow. Screens: Card booking action screens. Scenarios: Order completion, address editing, card customization."
"card_settings_home","Card settings main screen event. Triggered when: 1) Card management home screen opens, 2) Card details view is accessed, 3) Settings options are displayed. Properties: card_type (debit/credit), card_state (active/blocked/expired), available_options (count), user_permissions (list). Purpose: Track card management usage, monitor settings access patterns, optimize card control UX. Screens: CardSettingsFragment, CardDetailViewModel. Scenarios: Card management access, settings exploration, control preferences."
"card_number_copy_clicked","Card number copy action event. Triggered when: 1) User copies card number to clipboard, 2) Card details copy functionality used, 3) Quick access to card information. Properties: card_type (debit/credit), copy_source (full_number/masked), user_authenticated (boolean), copy_method (button/long_press). Purpose: Track card detail access patterns, monitor security usage, optimize information access. Screens: Card details screens. Scenarios: Card number sharing, payment form filling, reference copying."
"bbps_home_opened","BBPS (Bill Payment) home screen event. Triggered when: 1) Bill payment section is opened, 2) BBPS interface is accessed, 3) Utility payment flow begins. Properties: source (navigation/deeplink), red_dot_billers (list), number_of_banner (int), highlighted_categories (list). Purpose: Track bill payment adoption, monitor category preferences, optimize payment discovery. Screens: BBPSHomeFragment, BillPaymentViewModel. Scenarios: Regular bill payments, new service discovery, payment exploration."
"bbps_option_clicked","BBPS category selection event. Triggered when: 1) Bill payment category is selected, 2) Service type is chosen, 3) Payment category navigation occurs. Properties: selection_category (electricity/gas/water/mobile), source (grid/search/banner), category_rank (int), user_history (boolean). Purpose: Track category preferences, monitor service popularity, optimize category arrangement. Screens: BBPS category selection. Scenarios: Utility selection, service discovery, payment initiation."
"bbps_search_screen_opened","BBPS provider search screen event. Triggered when: 1) Service provider search is opened, 2) Biller listing screen displays, 3) Provider selection interface loads. Properties: selection_category (service_type), provider_count (int), has_recent_providers (boolean), search_enabled (boolean). Purpose: Track provider discovery patterns, monitor search usage, optimize provider selection UX. Screens: Provider search/listing screens. Scenarios: Provider discovery, service selection, biller search."
"bbps_enter_details_page_opened","BBPS details entry screen event. Triggered when: 1) Bill payment details form opens, 2) Account/meter number entry screen displays, 3) Service identifier input begins. Properties: selection_category (service_type), selected_vendor (provider_name), form_fields (count), validation_enabled (boolean). Purpose: Track form engagement, monitor completion rates, optimize data entry UX. Screens: Bill details entry forms. Scenarios: Account number entry, meter ID input, service details."
"bbps_bill_details_page_opened","BBPS bill summary screen event. Triggered when: 1) Bill details/summary screen opens, 2) Payment amount confirmation displays, 3) Bill information review begins. Properties: selection_category (service_type), selected_vendor (provider), bill_amount (amount), payment_due_date (date). Purpose: Track bill review patterns, monitor payment confirmation rates, optimize summary UX. Screens: Bill summary/details screens. Scenarios: Bill review, amount confirmation, payment preparation."
"spend_analytics_launch","Spend analytics access event. Triggered when: 1) Spending insights feature is opened, 2) Financial analytics screen loads, 3) Expense analysis begins. Properties: flow (icon/explore/bottomsheet), source (navigation/notification), has_transaction_data (boolean), analysis_period (default_range). Purpose: Track analytics feature adoption, monitor insights engagement, optimize financial analysis UX. Screens: SpendAnalyticsFragment from various entry points. Scenarios: Regular spending review, financial insights access, budget analysis."
"spend_analytics_page_open","Spend analytics screen load event. Triggered when: 1) Spend analytics interface fully loads, 2) Financial data visualization displays, 3) Analysis charts render successfully. Properties: flow (entry_method), load_time_ms (long), data_availability (boolean), account_count (int). Purpose: Monitor analytics performance, track data loading success, optimize visualization rendering. Screens: Spend analytics main screen. Scenarios: Analytics loading, data visualization, performance tracking."
"spend_analytics_edit_category_click","Spend category editing event. Triggered when: 1) User edits transaction categories, 2) Category assignment is modified, 3) Spending categorization is updated. Properties: category (current_category), page (analytics_context), old_category (previous), new_category (selected). Purpose: Track categorization engagement, monitor category accuracy, optimize expense classification. Screens: Category editing interfaces. Scenarios: Category corrections, expense organization, spending classification."
"upi_note_entered","UPI transaction note entry event. Triggered when: 1) User adds notes to UPI payments, 2) Transaction descriptions are entered, 3) Payment references are added. Properties: flow (send/request), note_type (text/number/alphanumeric), note_length (character_count), is_user_send_v2 (boolean). Purpose: Track note usage patterns, monitor transaction documentation, optimize note entry UX. Screens: UPI send/request note entry. Scenarios: Payment descriptions, transaction references, personal notes."
"upi_qr_set_amount_proceed","UPI QR amount setting event. Triggered when: 1) Amount is set for QR code generation, 2) Dynamic QR creation with amount, 3) Merchant QR amount configuration. Properties: amount_str (formatted_amount), user_action (proceed/edit), qr_type (dynamic/static). Purpose: Track QR payment patterns, monitor amount setting behavior, optimize QR generation flow. Screens: QR amount setting screens. Scenarios: Merchant QR creation, dynamic amount setting, payment QR generation."
"edit_vpa_bottomsheet_opened","VPA (Virtual Payment Address) editing event. Triggered when: 1) VPA edit bottomsheet opens, 2) UPI ID modification interface displays, 3) Payment address customization begins. Properties: current_vpa (masked), edit_reason (customization/correction), vpa_count (available_options). Purpose: Track VPA customization usage, monitor personalization preferences, optimize VPA management UX. Screens: VPA editing bottomsheet. Scenarios: UPI ID personalization, address corrections, payment identity management."
"edit_vpa_successful","VPA editing completion event. Triggered when: 1) VPA edit operation succeeds, 2) UPI ID update is confirmed, 3) Payment address change is processed. Properties: old_vpa (previous_address), new_vpa (updated_address), edit_type (handle/suffix), validation_success (boolean). Purpose: Track VPA change success rates, monitor address preferences, measure customization completion. Screens: VPA edit success confirmation. Scenarios: Successful VPA updates, address personalization completion, identity customization."
"sa_homepage_open","Savings account homepage access event. Triggered when: 1) User opens savings account main screen, 2) Banking home interface loads, 3) Account dashboard is displayed. Properties: load_time (seconds), source (navigation/deeplink), account_balance (range), has_deposits (boolean). Purpose: Track banking feature engagement, monitor account access patterns, optimize financial dashboard UX. Screens: SavingsBankViewModel, Banking home screens. Scenarios: Regular account checking, balance review, financial management."
"sa_details_page_open","Savings account details page event. Triggered when: 1) Account details screen opens, 2) Detailed savings information is accessed, 3) Account breakdown view loads. Properties: account_type (savings/current), balance_visible (boolean), transaction_count (int), load_time (seconds). Purpose: Track detailed account engagement, monitor information access patterns, optimize account details UX. Screens: Account details screens. Scenarios: Account information review, transaction history access, detailed financial view."
"balance_rotation_completed","Balance display animation completion event. Triggered when: 1) Account balance rotation animation finishes, 2) Balance reveal animation completes, 3) Animated balance display ends. Properties: rotation_duration (milliseconds), animation_type (fade/slide/rotate), user_interaction (boolean). Purpose: Track UI animation performance, monitor user engagement with balance displays, optimize animation timing. Screens: Balance display components. Scenarios: Balance reveal animations, account switching animations, UI transitions."
"keypad_open","Banking keypad display event. Triggered when: 1) Numeric keypad opens for amount entry, 2) Deposit amount input begins, 3) Financial input interface displays. Properties: flow (deposit_standard/deposit_custom), amount (entered_amount), input_type (deposit/transfer/payment). Purpose: Track input method usage, monitor amount entry patterns, optimize financial input UX. Screens: Deposit entry, amount input screens. Scenarios: Deposit amount entry, custom amount input, financial calculations."
"keypad_closed","Banking keypad dismissal event. Triggered when: 1) Numeric keypad is closed after input, 2) Amount entry is completed, 3) Financial input interface is dismissed. Properties: flow (deposit_type), amount (final_amount), input_completed (boolean), time_spent (seconds). Purpose: Track input completion patterns, monitor entry success rates, optimize input flow efficiency. Screens: Amount entry completion. Scenarios: Successful amount entry, input cancellation, keypad dismissal."
"perf_deposit_creation_time","Deposit creation performance tracking event. Triggered when: 1) Fixed deposit creation process completes, 2) Deposit transaction finishes processing, 3) Investment creation workflow ends. Properties: time_taken (milliseconds), transaction_status (success/failed), deposit_amount (amount), creation_method (standard/custom). Purpose: Monitor deposit creation performance, track transaction processing times, optimize investment workflow efficiency. Screens: Deposit creation process. Scenarios: FD creation completion, investment processing, transaction timing analysis."
"passbook_page_open","Banking passbook screen access event. Triggered when: 1) Transaction history passbook opens, 2) Account statement view loads, 3) Transaction record interface displays. Properties: date_range_selected (period), load_time (seconds), source (navigation/deeplink), transaction_count (int). Purpose: Track passbook usage patterns, monitor transaction history engagement, optimize statement viewing experience. Screens: PassbookViewModel, transaction history screens. Scenarios: Transaction history review, statement access, financial record viewing."
"passbook_download_back_clicked","Passbook download cancellation event. Triggered when: 1) User cancels passbook download, 2) Back button pressed during PDF generation, 3) Download process is interrupted. Properties: download_progress (percentage), file_size (bytes), cancellation_reason (user/error/timeout). Purpose: Track download cancellation patterns, monitor user behavior during file generation, optimize download experience. Screens: Document download screens. Scenarios: Download interruption, user cancellation, process termination."
"toast_message","Banking module toast notification event. Triggered when: 1) Success/error messages are displayed, 2) User feedback notifications appear, 3) System messages are shown. Properties: message (notification_text), screen (current_context), response_time (milliseconds), status (success/error/warning). Purpose: Track user notification patterns, monitor message effectiveness, optimize feedback communication. Screens: All banking screens with notifications. Scenarios: Transaction confirmations, error notifications, success messages."
"nominee_page_cta_clicked","Nominee management action event. Triggered when: 1) Nominee details are submitted, 2) Guardian information is added, 3) Beneficiary management actions are taken. Properties: cta_clicked (action_type), details_filled (boolean), flow (deposit/savings/nominee), screen (nominee/guardian). Purpose: Track nominee management engagement, monitor beneficiary setup completion, optimize nominee flow UX. Screens: Nominee management screens, guardian details forms. Scenarios: Nominee addition, guardian setup, beneficiary management."
"op_land","Onboarding platform screen access event. Triggered when: 1) Platform onboarding screen opens, 2) Multi-step onboarding interface loads, 3) User enters onboarding flow. Properties: module (onboarding_module), module_index (step_number), flow (onboarding_type), product (slice/banking/upi), screen (screen_name). Purpose: Track onboarding progression, monitor step completion rates, optimize user onboarding experience. Screens: Platform onboarding screens. Scenarios: Initial onboarding, step navigation, flow progression."
"op_cta_action","Onboarding platform CTA interaction event. Triggered when: 1) Continue buttons are clicked in onboarding, 2) Action buttons are pressed during setup, 3) Navigation CTAs are selected. Properties: cta_action (click/tap), cta_type (primary/secondary), cta_text (button_text), screen (current_step), flow (onboarding_flow). Purpose: Track CTA engagement in onboarding, monitor button interaction patterns, optimize action placement and design. Screens: Onboarding CTA interactions. Scenarios: Step progression, action confirmation, navigation decisions."
"op_type","Onboarding input action event. Triggered when: 1) User types in onboarding forms, 2) Text input occurs during setup, 3) Data entry happens in onboarding fields. Properties: input_name (field_name), module (onboarding_step), screen (current_screen), input_type (text/number/selection). Purpose: Track input engagement during onboarding, monitor form completion patterns, optimize data collection UX. Screens: Onboarding input forms. Scenarios: Form filling, data entry, information collection."
"op_back","Onboarding back navigation event. Triggered when: 1) User navigates back in onboarding flow, 2) Previous step is accessed, 3) Onboarding regression occurs. Properties: back_type (system/user), screen (current_step), flow (onboarding_type), step_direction (backward). Purpose: Track onboarding flow patterns, monitor user navigation behavior, identify potential UX friction points. Screens: Onboarding navigation. Scenarios: Step regression, flow reversal, navigation patterns."
"op_missing_data","Onboarding missing data tracking event. Triggered when: 1) Required information is missing during onboarding, 2) Incomplete data is detected in setup, 3) Validation failures occur. Properties: message (missing_data_type), screen (current_step), module (onboarding_section), data_type (personal/financial/verification). Purpose: Track data completion issues, monitor onboarding friction points, optimize form validation and data collection. Screens: Onboarding validation screens. Scenarios: Missing information, validation errors, incomplete data."
"onboarding_started","Platform onboarding initiation event. Triggered when: 1) User begins onboarding process, 2) Setup flow is initiated, 3) Account creation starts. Properties: source (entry_point), flow_type (full/mini/express), product (target_product), user_type (new/existing). Purpose: Track onboarding adoption, monitor entry point effectiveness, analyze user onboarding patterns. Screens: Onboarding entry points. Scenarios: New user onboarding, account setup initiation, product onboarding."
"mini_onboarding_welcome_page_open","Mini onboarding welcome screen event. Triggered when: 1) Mini account onboarding welcome page opens, 2) Simplified signup flow begins, 3) Quick account setup starts. Properties: mini_version (onboarding_version), source (upi/direct), user_type (teen/adult), flow (mini_onboarding). Purpose: Track mini account adoption, monitor simplified onboarding effectiveness, optimize quick setup flows. Screens: Mini onboarding welcome. Scenarios: Quick account creation, simplified signup, mini account setup."
"sa_enter_pan_page_opened","PAN entry screen in savings account flow event. Triggered when: 1) PAN input screen opens during account setup, 2) Tax information collection begins, 3) Identity verification step starts. Properties: flow (savings_account), source (onboarding/kyc), pre_fill_available (boolean), validation_enabled (boolean). Purpose: Track PAN collection in banking flows, monitor identity verification completion, optimize tax compliance UX. Screens: PAN entry in banking. Scenarios: Account opening PAN entry, tax verification, identity collection."
"sa_enter_pan_continue_clicked","PAN entry continuation in savings flow event. Triggered when: 1) User continues after entering PAN, 2) PAN validation passes, 3) Tax information is confirmed. Properties: continue_type (manual/auto_fetch), pan_status (valid/invalid), flow (savings_account), validation_success (boolean). Purpose: Track PAN entry success rates, monitor validation effectiveness, optimize tax information collection. Screens: PAN confirmation. Scenarios: Successful PAN entry, validation completion, tax verification success."
"sa_selfie_capture_screen_open","Selfie capture screen in savings account flow event. Triggered when: 1) Selfie capture interface opens during banking KYC, 2) Face verification begins in account setup, 3) Biometric collection starts. Properties: flow (savings_account), capture_type (kyc/verification), camera_permission (granted/denied), retry_count (int). Purpose: Track biometric verification adoption in banking, monitor selfie capture success, optimize face verification UX. Screens: Banking selfie capture. Scenarios: KYC selfie capture, account verification, biometric collection."
"slice_account_onboarding_successfull","Successful slice account creation event. Triggered when: 1) Slice savings account creation completes successfully, 2) Account setup finishes, 3) Banking onboarding succeeds. Properties: flow (slice_account), completion_time (duration), verification_method (kyc/digital), account_type (savings/current). Purpose: Track account creation success rates, monitor onboarding completion, measure banking conversion effectiveness. Screens: Account creation success. Scenarios: Successful account opening, onboarding completion, banking setup success."
"app_permission_page_opened","App permission request screen event. Triggered when: 1) Platform permission request screen opens, 2) System permissions are requested during onboarding, 3) Feature access permissions are shown. Properties: permission_type (camera/location/contacts), flow (onboarding/feature), is_mandatory (boolean), module (platform_module). Purpose: Track permission request patterns, monitor grant rates during onboarding, optimize permission timing and presentation. Screens: Platform permission requests. Scenarios: Onboarding permissions, feature access requests, system permission flows."
"permissions_popup_opened","Auth module permissions event. Triggered when: 1) Individual permission popup opens, 2) Specific permission explanation shows, 3) Permission justification displays. Properties: permission_type (specific permission), flow (phone_verification). Purpose: Track individual permission education, measure permission-specific engagement. Screens: Permission explanation popups. Scenarios: SMS permission, phone permission, location permission education."
"permissions_popup_allow_clicked","Auth module permissions event. Triggered when: 1) User clicks Allow on permission popup, 2) Permission grant action taken, 3) User accepts specific permission. Properties: permission_type (granted permission). Purpose: Track permission grant rates, measure user permission acceptance. Screens: Permission popup allow action. Scenarios: Permission acceptance, user permission granting, flow progression."
"permissions_popup_deny_clicked","Auth module permissions event. Triggered when: 1) User clicks Deny on permission popup, 2) Permission rejection action taken, 3) User declines specific permission. Properties: permission_type (denied permission). Purpose: Track permission denial rates, measure user permission resistance. Screens: Permission popup deny action. Scenarios: Permission rejection, user privacy concerns, permission avoidance."
"session_timeout","Session management core event. Triggered when: 1) User session expires due to inactivity, 2) Background timeout threshold reached, 3) Security timeout enforced. Properties: condition_met (timeout type), inactive_time (seconds inactive), terminated_by (frontend/backend). Purpose: Track session management effectiveness, measure user activity patterns, optimize timeout settings. Screens: Background session monitoring. Scenarios: User inactivity, background timeouts, security timeouts, session expiry."
"session_token_fetched","Session management success event. Triggered when: 1) Session token successfully obtained, 2) Authentication token refresh succeeds, 3) Session establishment completes. Properties: retries (attempt count), source (token source). Purpose: Track session establishment success, measure token fetch performance, monitor authentication reliability. Screens: Background session management. Scenarios: Initial session creation, token refresh, session recovery, authentication success."
"session_creation_internet_status","Session management connectivity event. Triggered when: 1) Session creation checks internet connectivity, 2) Network status verified during authentication, 3) Connectivity validation occurs. Properties: is_connected (connectivity status). Purpose: Track network dependency in authentication, measure connectivity impact on sessions. Screens: Background connectivity checks. Scenarios: Session creation, network validation, connectivity verification, authentication dependency."
"app_login_complete","Auth completion tracking event. Triggered when: 1) Complete login flow finishes with result, 2) Authentication process concludes, 3) User login journey ends. Properties: time (completion time), mode (email/gmail), status (success/failure), failure_reason (error details), next_screen (destination screen). Purpose: Track end-to-end login success, measure authentication performance, analyze completion rates. Screens: Post-authentication flow. Scenarios: Successful login, authentication failures, flow completion, user journey tracking."
"smv_verification_initiated","Auth carrier verification event. Triggered when: 1) Silent Mobile Verification starts, 2) Carrier-based authentication begins, 3) Network operator verification triggers. Properties: flow (login_sign_up), carrier (network operator). Purpose: Track carrier verification usage, measure SMV adoption, analyze network operator patterns. Screens: Background SMV process. Scenarios: Carrier verification, network authentication, silent verification, operator-based auth."
"op_land","Onboarding platform core event. Triggered when: 1) Any onboarding screen opens/lands, 2) Platform screen initialization occurs, 3) Module screen navigation happens. Properties: screen (screen type), module (platform module), module_index (sequence position), cta_count (available actions), cta_active_count (enabled actions), flow (onboarding flow), flow_type (flow category), product (product type), is_bottom_sheet (UI type). Purpose: Track onboarding screen engagement, measure module progression, analyze user journey through platform. Screens: All onboarding platform screens. Scenarios: Screen navigation, module progression, onboarding flow, user journey tracking."
"op_cta_action","Onboarding platform interaction event. Triggered when: 1) User clicks CTA buttons on platform screens, 2) Action buttons activated, 3) Primary/secondary actions taken. Properties: screen (current screen), cta_action (action type), cta_type (primary/secondary), cta_text (button text), module (platform module), flow context. Purpose: Track user interactions with onboarding CTAs, measure button effectiveness, analyze action patterns. Screens: All onboarding platform screens with CTAs. Scenarios: Button clicks, action progression, CTA engagement, user interaction tracking."
"op_type","Onboarding platform input event. Triggered when: 1) User inputs data in onboarding forms, 2) Text fields interaction occurs, 3) Input validation triggers. Properties: screen (input screen), input_name (field name), module (platform module), flow context. Purpose: Track input field engagement, measure form completion, analyze user data entry patterns. Screens: Onboarding forms and input screens. Scenarios: Form filling, data entry, input validation, field interaction."
"op_back","Onboarding platform navigation event. Triggered when: 1) User presses back button/gesture, 2) Navigation backward occurs, 3) Screen exit actions taken. Properties: screen (current screen), back_type (system/gesture/button), module (platform module), flow context. Purpose: Track backward navigation patterns, measure user flow abandonment, analyze navigation behavior. Screens: All onboarding platform screens. Scenarios: Back navigation, flow exit, user retreat, navigation patterns."
"api_error","Onboarding platform error event. Triggered when: 1) API calls fail during onboarding, 2) Network errors occur in platform flows, 3) Server errors interrupt user journey. Properties: screen (error screen), api (failed endpoint), error_message (error details), module (platform module), flow context. Purpose: Track API failure impact on onboarding, identify problematic endpoints, monitor platform reliability. Screens: Any platform screen with API calls. Scenarios: Network failures, server errors, API timeouts, platform reliability issues."
"aa_landing_page_open","Account Aggregator platform event. Triggered when: 1) AA landing page opens for user, 2) Account aggregator flow begins, 3) Financial data connection starts. Properties: screen (AA screen), vendor (AA provider), bank (financial institution), module (account_aggregator), flow context. Purpose: Track AA adoption, measure provider selection, analyze bank integration patterns. Screens: Account Aggregator landing pages. Scenarios: AA flow start, bank connection, provider selection, financial data access."
"aa_landing_screen_continue_clicked","Account Aggregator platform event. Triggered when: 1) User clicks continue on AA landing screen, 2) AA flow progression occurs, 3) Bank connection proceeds. Properties: vendor (AA provider), screen (current screen), cta_text (button text), cta_target_type (action target), cta_target_resource (target resource), flow context. Purpose: Track AA flow progression, measure user commitment to bank connection, analyze provider-specific success. Screens: AA landing screen continue action. Scenarios: AA flow progression, bank connection commitment, provider acceptance."
"profile_type_open","Onboarding platform profile event. Triggered when: 1) Profile type selection screen opens, 2) User profile category selection begins, 3) Profile customization flow starts. Properties: module context, flow information. Purpose: Track profile selection engagement, measure user segmentation preferences. Screens: Profile type selection screen. Scenarios: Profile category selection, user segmentation, profile customization start."
"profile_type_click","Onboarding platform profile event. Triggered when: 1) User selects specific profile type, 2) Profile category chosen, 3) User segmentation occurs. Properties: profile_type (selected category), module context, flow information. Purpose: Track profile selection patterns, measure user segmentation distribution, analyze profile preferences. Screens: Profile type selection action. Scenarios: Profile category selection, user type identification, segmentation completion."
"op_missing_data","Onboarding platform data event. Triggered when: 1) Required data missing for screen, 2) Data validation fails, 3) Configuration issues prevent proper display. Properties: message (missing data details), screen context, module information. Purpose: Track data completeness issues, identify configuration problems, monitor platform data integrity. Screens: Any platform screen with data dependencies. Scenarios: Missing configurations, data validation failures, incomplete setups."
"exit_bottom_sheet_opened","Onboarding platform exit event. Triggered when: 1) User attempts to exit onboarding flow, 2) Exit confirmation bottomsheet opens, 3) Flow abandonment prevention triggers. Properties: module context, flow information. Purpose: Track exit attempt patterns, measure flow abandonment rates, analyze user retention. Screens: Exit confirmation bottomsheet. Scenarios: Flow abandonment, exit attempts, user retention, journey interruption."
"exit_bottom_sheet_cta_clicked","Onboarding platform exit event. Triggered when: 1) User clicks CTA in exit bottomsheet, 2) Exit confirmation or cancellation occurs, 3) Flow abandonment decision made. Properties: cta_text (button text clicked), module context, flow information. Purpose: Track exit decision patterns, measure retention effectiveness, analyze abandonment reasons. Screens: Exit bottomsheet CTA actions. Scenarios: Exit confirmation, flow continuation, abandonment prevention, user decision tracking."
"web_view_opened","Platform web integration event. Triggered when: 1) WebView components open in platform, 2) Web-based screens load, 3) External content integration occurs. Properties: screen (web screen type), vendor (content provider), aa (account aggregator), bank (financial institution), error (loading errors), module context. Purpose: Track web integration usage, measure external content loading, monitor web component performance. Screens: WebView-based platform screens. Scenarios: Web content loading, external integrations, hybrid app experiences, web component usage."
"aa_recommended_bank_list_open","Account Aggregator onboarding event. Triggered when: 1) Account Selection screen opens with AA vendor, 2) User views recommended bank list, 3) AA module displays bank selection options. Properties: screen (AccountSelection), vendor (ignosis/finvu), bank_list (account list JSON), module_index, cta_count, flow, product. Purpose: Track AA bank selection screen opens, measure vendor performance, analyze user bank preferences. Screens: AccountSelectionScreen, PlatformAccountSelectionEventUtil.trackScreenOpen(). Scenarios: AA onboarding flow, bank account selection, vendor-specific flows."
"aa_recommended_bank_continue","Account Aggregator bank selection event. Triggered when: 1) User clicks Continue after bank selection, 2) AA bank selection CTA clicked, 3) Bank selection confirmation action. Properties: screen, vendor, type (recommended), bank (selected bank), cta_action (click), cta_text, cta_target_type, cta_target_resource. Purpose: Track AA bank selection completion rates, measure conversion, analyze bank selection patterns. Screens: AccountSelectionScreen, PlatformAccountSelectionEventUtil.trackCtaClick(). Scenarios: AA bank selection, continue action, recommended bank selection."
"aa_bank_selected","Account Aggregator bank item selection event. Triggered when: 1) User selects specific bank from AA list, 2) Bank item clicked in selection screen, 3) User makes bank choice. Properties: screen, vendor, type (recommended), bank (selected bank), cta_action (click), cta_text, module context. Purpose: Track individual bank selection interactions, measure bank popularity, analyze user preferences. Screens: AccountSelectionScreen, PlatformAccountSelectionEventUtil.trackItemSelected(). Scenarios: Bank item selection, bank preference tracking, AA vendor analysis."
"flutter_analytics_logging","Flutter integration analytics event. Triggered when: 1) Flutter modules log analytics data, 2) Cross-platform event tracking, 3) Flutter-native integration events. Properties: name (event name), type (event type), data (event parameters), source (flutter/native). Purpose: Track Flutter module usage, measure cross-platform integration, monitor Flutter component performance. Screens: Flutter-based components, FlutterAnalyticsLogger.initiateAnalyticsLogging(). Scenarios: Flutter screen interactions, cross-platform analytics, hybrid app tracking."
"toast_message","Banking module toast notification event. Triggered when: 1) Success/error messages displayed, 2) User feedback toasts shown, 3) Banking operation status updates. Properties: message_displayed (toast content), screen_name (context screen), product (banking product), module context. Purpose: Track user feedback patterns, measure error rates, analyze toast message effectiveness. Screens: DownloadEmailCertificateViewModel.errorToastEvent(). Scenarios: Banking operation feedback, error message tracking, success confirmation."
"signature_upload_selfie_auth","Signature upload with selfie authentication event. Triggered when: 1) Signature upload flow with selfie verification starts, 2) HVT authentication process begins, 3) User initiates signature verification. Properties: payload (verification data), transaction_type (operation type), auth_config (authentication settings), flow context. Purpose: Track signature verification flows, measure authentication success rates, monitor security compliance. Screens: SignatureUploadWithSelfieAuthImpl.invokeSignatureUploadWithSelfie(). Scenarios: Document signing, identity verification, security authentication."
"loan_requirement_screen_open","Loan requirement onboarding event. Triggered when: 1) Loan requirement screen opens, 2) User enters loan application flow, 3) Loan details collection starts. Properties: module_index, cta_count, flow, flow_type, product, module (loan_requirement). Purpose: Track loan application funnel entry, measure requirement collection engagement, analyze user flow patterns. Screens: PlatformLoanRequirementEventUtil.trackScreenOpen(). Scenarios: Loan application start, requirement gathering, onboarding flow."
"loan_requirement_reason_selected","Loan purpose selection event. Triggered when: 1) User selects loan purpose reason, 2) Loan requirement dropdown selection, 3) Purpose category chosen. Properties: reason (selected purpose), module context, flow tracking data. Purpose: Track loan purpose preferences, analyze user needs, measure selection patterns. Screens: PlatformLoanRequirementEventUtil.trackClicks(). Scenarios: Purpose selection, loan categorization, user preference tracking."
"loan_requirement_submit_clicked","Loan requirement submission event. Triggered when: 1) User submits loan requirement form, 2) Continue button clicked with requirements, 3) Loan application proceeds. Properties: loan_amount (requested amount), purpose (selected category), other_purpose (custom reason), module context. Purpose: Track loan application completion rates, measure requirement submission success, analyze loan patterns. Screens: PlatformLoanRequirementEventUtil.trackClicks(). Scenarios: Loan form submission, requirement completion, application progression."
"loan_requirement_skip_clicked","Loan requirement skip event. Triggered when: 1) User skips loan requirement step, 2) Skip CTA clicked, 3) User bypasses requirement collection. Properties: skip (true), module context, flow tracking data. Purpose: Track requirement skip rates, measure optional step completion, analyze user behavior patterns. Screens: PlatformLoanRequirementEventUtil.trackClicks(). Scenarios: Step skipping, optional requirement bypass, flow optimization."
"credit_score_screen_open","Credit score screen analytics event. Triggered when: 1) Credit score screen opens, 2) User views credit score information, 3) Credit score module initializes. Properties: module_index, cta_count, flow, flow_type, product, module (CREDIT_SCORE), screen (CREDIT_SCORE_SCREEN). Purpose: Track credit score screen engagement, measure user interest in credit information, analyze score viewing patterns. Screens: PlatformCreditScoreEventUtil.trackCreditScorePageOpened(). Scenarios: Credit score viewing, score information access, credit awareness tracking."
"credit_score_screen_continue","Credit score continue action event. Triggered when: 1) User clicks continue on credit score screen, 2) Credit score flow progression, 3) User proceeds after viewing score. Properties: module context, analytics configuration, screen tracking data. Purpose: Track credit score screen completion rates, measure user engagement with credit information, analyze flow continuation patterns. Screens: PlatformCreditScoreEventUtil.trackCreditScoreScreenContinue(). Scenarios: Score screen completion, credit flow progression, user engagement tracking."
"picker_screen_open","Picker screen analytics event. Triggered when: 1) Picker screen opens in onboarding platform, 2) User views selection options, 3) Picker module initializes. Properties: screen (picker), module_index, cta_count, flow, flow_type, product, module (PICKER). Purpose: Track picker screen engagement, measure selection screen usage, analyze user interaction patterns. Screens: PlatformPickerScreenEventUtil.trackScreenOpen(). Scenarios: Option selection screens, picker module usage, onboarding flow tracking."
"picker_cta_click","Picker selection action event. Triggered when: 1) User clicks continue after making selection, 2) Picker CTA action performed, 3) Selection confirmation action. Properties: screen (picker), cta_action (continue), selected_text (chosen option), module context. Purpose: Track picker selection completion rates, measure user choice patterns, analyze selection effectiveness. Screens: PlatformPickerScreenEventUtil.trackCtaAction(). Scenarios: Option selection completion, picker CTA actions, choice confirmation."
"profile_type_open","Profile selection screen analytics event. Triggered when: 1) Profile selection screen opens, 2) User views profile type options, 3) Profile selection module initializes. Properties: module_index, cta_count, flow, flow_type, product, module context. Purpose: Track profile selection screen engagement, measure user flow progression, analyze profile type interest patterns. Screens: PlatformProfileSelectionEventUtil.trackScreenOpen(). Scenarios: Profile type selection, user categorization, onboarding flow."
"profile_type_click","Profile type selection event. Triggered when: 1) User selects profile type, 2) Profile option clicked, 3) User categorization action. Properties: profile_type (selected profile), module context, analytics configuration. Purpose: Track profile type preferences, measure user categorization patterns, analyze profile selection trends. Screens: PlatformProfileSelectionEventUtil.trackCtaClick(). Scenarios: Profile type selection, user categorization, demographic tracking."
"profile_selection_back_press","Profile selection back navigation event. Triggered when: 1) User presses back on profile selection screen, 2) Navigation back action performed, 3) Profile selection flow exit. Properties: back_type (system/cta_back), module context, flow tracking data. Purpose: Track profile selection abandonment rates, measure back navigation patterns, analyze user flow exits. Screens: PlatformProfileSelectionEventUtil.trackBackPress(). Scenarios: Back navigation, flow abandonment, user exit tracking."
"profile_selection_api_error","Profile selection API error event. Triggered when: 1) API errors occur during profile selection, 2) Network failures in profile flow, 3) Profile selection request failures. Properties: api (endpoint URL), error_message (error details), module context. Purpose: Track profile selection technical issues, measure API reliability, analyze error patterns. Screens: PlatformProfileSelectionEventUtil.trackApiError(). Scenarios: API failures, network errors, profile selection issues." aa_recommended_bank_list_open,"Account Aggregator onboarding event. Triggered when: 1) Account Selection screen opens with AA vendor, 2) User views recommended bank list, 3) AA module displays bank selection options. Properties: screen (AccountSelection), vendor (ignosis/finvu), bank_list (account list JSON), module_index, cta_count, flow, product. Purpose: Track AA bank selection screen opens, measure vendor performance, analyze user bank preferences. Screens: AccountSelectionScreen, PlatformAccountSelectionEventUtil.trackScreenOpen(). Scenarios: AA onboarding flow, bank account selection, vendor-specific flows."
"aa_recommended_bank_continue","Account Aggregator bank selection event. Triggered when: 1) User clicks Continue after bank selection, 2) AA bank selection CTA clicked, 3) Bank selection confirmation action. Properties: screen, vendor, type (recommended), bank (selected bank), cta_action (click), cta_text, cta_target_type, cta_target_resource. Purpose: Track AA bank selection completion rates, measure conversion, analyze bank selection patterns. Screens: AccountSelectionScreen, PlatformAccountSelectionEventUtil.trackCtaClick(). Scenarios: AA bank selection, continue action, recommended bank selection."
"aa_bank_selected","Account Aggregator bank item selection event. Triggered when: 1) User selects specific bank from AA list, 2) Bank item clicked in selection screen, 3) User makes bank choice. Properties: screen, vendor, type (recommended), bank (selected bank), cta_action (click), cta_text, module context. Purpose: Track individual bank selection interactions, measure bank popularity, analyze user preferences. Screens: AccountSelectionScreen, PlatformAccountSelectionEventUtil.trackItemSelected(). Scenarios: Bank item selection, bank preference tracking, AA vendor analysis."
"flutter_analytics_logging","Flutter integration analytics event. Triggered when: 1) Flutter modules log analytics data, 2) Cross-platform event tracking, 3) Flutter-native integration events. Properties: name (event name), type (event type), data (event parameters), source (flutter/native). Purpose: Track Flutter module usage, measure cross-platform integration, monitor Flutter component performance. Screens: Flutter-based components, FlutterAnalyticsLogger.initiateAnalyticsLogging(). Scenarios: Flutter screen interactions, cross-platform analytics, hybrid app tracking."
"signature_upload_selfie_auth","Signature upload with selfie authentication event. Triggered when: 1) Signature upload flow with selfie verification starts, 2) HVT authentication process begins, 3) User initiates signature verification. Properties: payload (verification data), transaction_type (operation type), auth_config (authentication settings), flow context. Purpose: Track signature verification flows, measure authentication success rates, monitor security compliance. Screens: SignatureUploadWithSelfieAuthImpl.invokeSignatureUploadWithSelfie(). Scenarios: Document signing, identity verification, security authentication."
"appln_loan_requirement_screen_open","Loan requirement onboarding event. Triggered when: 1) Loan requirement screen opens, 2) User enters loan application flow, 3) Loan details collection starts. Properties: module_index, cta_count, flow, flow_type, product, module (loan_requirement). Purpose: Track loan application funnel entry, measure requirement collection engagement, analyze user flow patterns. Screens: PlatformLoanRequirementEventUtil.trackScreenOpen(). Scenarios: Loan application start, requirement gathering, onboarding flow."
"appln_loan_requirement_reason_selected","Loan purpose selection event. Triggered when: 1) User selects loan purpose reason, 2) Loan requirement dropdown selection, 3) Purpose category chosen. Properties: reason (selected purpose), module context, flow tracking data. Purpose: Track loan purpose preferences, analyze user needs, measure selection patterns. Screens: PlatformLoanRequirementEventUtil.trackClicks(). Scenarios: Purpose selection, loan categorization, user preference tracking."
"appln_loan_requirement_submit_clicked","Loan requirement submission event. Triggered when: 1) User submits loan requirement form, 2) Continue button clicked with requirements, 3) Loan application proceeds. Properties: loan_amount (requested amount), purpose (selected category), other_purpose (custom reason), module context. Purpose: Track loan application completion rates, measure requirement submission success, analyze loan patterns. Screens: PlatformLoanRequirementEventUtil.trackClicks(). Scenarios: Loan form submission, requirement completion, application progression."
"appln_loan_requirement_skip_clicked","Loan requirement skip event. Triggered when: 1) User skips loan requirement step, 2) Skip CTA clicked, 3) User bypasses requirement collection. Properties: skip (true), module context, flow tracking data. Purpose: Track requirement skip rates, measure optional step completion, analyze user behavior patterns. Screens: PlatformLoanRequirementEventUtil.trackClicks(). Scenarios: Step skipping, optional requirement bypass, flow optimization."
"appln_credit_score_screen_open","Credit score screen analytics event. Triggered when: 1) Credit score screen opens, 2) User views credit score information, 3) Credit score module initializes. Properties: module_index, cta_count, flow, flow_type, product, module (CREDIT_SCORE), screen (CREDIT_SCORE_SCREEN). Purpose: Track credit score screen engagement, measure user interest in credit information, analyze score viewing patterns. Screens: PlatformCreditScoreEventUtil.trackCreditScorePageOpened(). Scenarios: Credit score viewing, score information access, credit awareness tracking."
"appln_credit_score_screen_continue","Credit score continue action event. Triggered when: 1) User clicks continue on credit score screen, 2) Credit score flow progression, 3) User proceeds after viewing score. Properties: module context, analytics configuration, screen tracking data. Purpose: Track credit score screen completion rates, measure user engagement with credit information, analyze flow continuation patterns. Screens: PlatformCreditScoreEventUtil.trackCreditScoreScreenContinue(). Scenarios: Score screen completion, credit flow progression, user engagement tracking."
"age_screen_open","Age verification onboarding event. Triggered when: 1) Age verification screen opens, 2) User enters age verification flow, 3) Age input screen is displayed. Properties: screen (Verify), is_bottom_sheet (false), default_age (default age value), module_index, cta_count, flow, product, module (Age). Purpose: Track age verification screen engagement, measure age collection completion, analyze default age usage patterns. Screens: PlatformAgeEventUtils.trackScreenOpen(). Scenarios: Age verification flow, age input collection, onboarding age step."
"age_cta_click","Age verification continue event. Triggered when: 1) User clicks proceed/continue on age screen, 2) Age verification CTA action, 3) Age confirmation submission. Properties: screen (Verify), cta_action (click), cta_type (primary), cta_text (button text), type (API/screen), resource_path (target URL), module context. Purpose: Track age verification completion rates, measure CTA effectiveness, analyze age confirmation patterns. Screens: PlatformAgeEventUtils.trackProceedClick(). Scenarios: Age confirmation, age verification completion, proceed action."
"age_back_press","Age verification back navigation event. Triggered when: 1) User presses back on age screen, 2) Age verification flow exit, 3) Navigation back from age step. Properties: screen (Verify), back_type (system/cta_back), module context. Purpose: Track age verification abandonment rates, measure back navigation patterns, analyze user flow exits. Screens: PlatformAgeEventUtils.trackBackPress(). Scenarios: Back navigation, age flow abandonment, user exit tracking."
"age_api_error","Age verification API error event. Triggered when: 1) API errors during age verification, 2) Network failures in age flow, 3) Age verification request failures. Properties: screen (Verify), api (endpoint URL), error_message (error details), module context. Purpose: Track age verification technical issues, measure API reliability, analyze error patterns. Screens: PlatformAgeEventUtils.trackApiError(). Scenarios: API failures, network errors, age verification issues."
"select_bank_page_opened","Manage beneficiary bank selection event. Triggered when: 1) Bank selection screen opens, 2) User enters bank selection flow, 3) Add beneficiary bank choice screen displays. Properties: previous_screen (source screen context). Purpose: Track beneficiary bank selection funnel entry, measure bank selection engagement, analyze source screen patterns. Screens: ManageBeneficiaryAnalytics.bankSelectionScreenOpened(). Scenarios: Add beneficiary flow, bank selection start, beneficiary management entry."
"bene_account_details_page_opened","Beneficiary account details screen event. Triggered when: 1) Account details entry screen opens, 2) User enters beneficiary details, 3) Account information collection starts. Properties: bank_name (selected bank or manual), ifsc_loaded (IFSC prefilled status), account_loaded (account prefilled status), ifsc_option_present (IFSC required flag). Purpose: Track beneficiary details entry engagement, measure data prefilling effectiveness, analyze bank-specific patterns. Screens: ManageBeneficiaryAnalytics.addBeneficiaryScreenOpened(). Scenarios: Beneficiary details entry, account information collection, data prefilling tracking."
"bene_account_details_error_shown","Beneficiary validation error event. Triggered when: 1) Account/IFSC validation errors occur, 2) Invalid beneficiary details entered, 3) Form validation failures. Properties: account_no_error (account validation error), ifsc_error (IFSC validation error). Purpose: Track beneficiary validation issues, measure data quality problems, analyze common validation errors. Screens: ManageBeneficiaryAnalytics.accountDetailsError(). Scenarios: Validation failures, data entry errors, form validation tracking."
"bene_account_details_page_cta","Beneficiary creation CTA event. Triggered when: 1) User clicks continue/submit on beneficiary form, 2) Beneficiary creation action, 3) Account details confirmation. Properties: bank_name (selected bank or manual), ifsc_option_present (IFSC required flag), option (CTA option), next_screen (target screen). Purpose: Track beneficiary creation completion rates, measure CTA effectiveness, analyze flow progression patterns. Screens: ManageBeneficiaryAnalytics.beneficiaryCreationCtaClick(). Scenarios: Beneficiary creation, account details submission, flow progression."
"manage_beneficiary_page_opened","Manage beneficiary landing event. Triggered when: 1) Manage beneficiary screen opens, 2) User views existing beneficiaries, 3) Beneficiary management home displays. Properties: bene_count (number of existing beneficiaries). Purpose: Track beneficiary management engagement, measure existing beneficiary usage, analyze beneficiary count patterns. Screens: ManageBeneficiaryAnalytics.manageBeneficiaryPageOpened(). Scenarios: Beneficiary management access, existing beneficiary viewing, management home usage."
"bene_addition_complete_page_open","Beneficiary addition completion event. Triggered when: 1) Beneficiary addition success screen opens, 2) Beneficiary creation completes, 3) Success confirmation displayed. Properties: bank_name (selected bank or manual), ifsc_option_present (IFSC required flag). Purpose: Track beneficiary addition success rates, measure completion patterns, analyze bank-specific success rates. Screens: ManageBeneficiaryAnalytics.beneficiaryResultScreenOpened(). Scenarios: Beneficiary addition success, creation completion, success confirmation."
"manage_beneficiary_tile_clicked","Beneficiary tile interaction event. Triggered when: 1) User clicks on beneficiary tile, 2) Add beneficiary tile clicked, 3) Beneficiary management action. Properties: tile_number_clicked (tile index), tile_type (bene/add_bene). Purpose: Track beneficiary tile engagement, measure interaction patterns, analyze tile usage effectiveness. Screens: ManageBeneficiaryAnalytics.beneficiaryTileClicked(). Scenarios: Beneficiary selection, tile interactions, management actions."
"manage_beneficiary_details_bottomsheet_opened","Beneficiary details bottomsheet event. Triggered when: 1) Beneficiary details bottomsheet opens, 2) User views beneficiary limits, 3) Beneficiary management options displayed. Properties: tile_type (bank_account), day_txn_count_limit (transaction count limit), day_txn_amount_limit (transaction amount limit). Purpose: Track beneficiary details access, measure limit viewing patterns, analyze transaction limit engagement. Screens: ManageBeneficiaryAnalytics.manageBeneficiaryDetailsBSOpened(). Scenarios: Beneficiary details viewing, limit information access, management options."
"manage_beneficiary_bottomsheet_remove_clicked","Beneficiary deletion action event. Triggered when: 1) User clicks delete/remove beneficiary, 2) Beneficiary removal action, 3) Delete confirmation triggered. Properties: beneficiary context. Purpose: Track beneficiary deletion patterns, measure removal rates, analyze beneficiary management actions. Screens: ManageBeneficiaryAnalytics.deleteBeneficiaryCta(). Scenarios: Beneficiary removal, delete actions, management cleanup."
"manage_beneficiary_limit_change_bottomsheet_opened","Beneficiary limit change popup event. Triggered when: 1) Limit change bottomsheet opens, 2) User modifies transaction limits, 3) Limit adjustment interface displays. Properties: type (txn_amount/txn_count). Purpose: Track limit modification engagement, measure limit change patterns, analyze transaction limit adjustments. Screens: ManageBeneficiaryAnalytics.limitChangePopupOpened(). Scenarios: Limit modifications, transaction limit adjustments, beneficiary management."
"manage_beneficiary_limit_change_bottomsheet_continue_clicked","Beneficiary limit update confirmation event. Triggered when: 1) User confirms limit changes, 2) Limit modification submission, 3) Transaction limit update action. Properties: type (txn_amount/txn_count), day_txn_amount_limit or day_txn_count_limit (new limit value). Purpose: Track limit change completion rates, measure limit modification patterns, analyze limit adjustment effectiveness. Screens: ManageBeneficiaryAnalytics.limitChangePopupCtaClicked(). Scenarios: Limit confirmations, transaction limit updates, limit change completion."
"bottomsheet_view","Beneficiary upload option bottomsheet event. Triggered when: 1) Upload option bottomsheet opens, 2) Payee upload options displayed, 3) Bank selection upload methods shown. Properties: flow (select_bank). Purpose: Track upload option engagement, measure bottomsheet usage, analyze upload method selection patterns. Screens: ManageBeneficiaryAnalytics.trackPayeeUploadBottomSheetOpen(). Scenarios: Upload method selection, bottomsheet interactions, bank selection options."
"bottomsheet_cta_clicked","Beneficiary upload method selection event. Triggered when: 1) User selects upload method, 2) Camera/gallery/manual option chosen, 3) Upload method CTA clicked. Properties: button_value (take_a_photo/upload_from_gallery/manual), flow (select_bank). Purpose: Track upload method preferences, measure method selection patterns, analyze user upload behavior. Screens: ManageBeneficiaryAnalytics.trackPayeeUploadBsCtaClicked(). Scenarios: Upload method selection, camera/gallery choices, manual entry selection."
"manage_beneficiary_toast_message","Manage beneficiary toast notification event. Triggered when: 1) Toast messages displayed in beneficiary flow, 2) Success/error notifications shown, 3) User feedback toasts. Properties: message_displayed (toast content), screen (manage_beneficiary_page). Purpose: Track user feedback patterns, measure error/success rates, analyze toast message effectiveness. Screens: ManageBeneficiaryAnalytics.recordToastMessage(). Scenarios: Beneficiary operation feedback, error notifications, success confirmations."
"mpin_verify_screen_bene_setup","MPIN verification screen event in beneficiary setup. Triggered when: 1) MPIN screen opens during beneficiary creation, 2) User enters MPIN verification flow, 3) Beneficiary MPIN authentication starts. Properties: flow (bene_setup), type (mpin). Purpose: Track MPIN verification engagement in beneficiary flow, measure authentication patterns, analyze security verification rates. Screens: ManageBeneficiaryAnalytics.mpinScreenOpened(). Scenarios: Beneficiary MPIN verification, authentication flow, security verification."
"mpin_verify_screen_entered_bene_setup","MPIN entry completion event in beneficiary setup. Triggered when: 1) User enters MPIN successfully, 2) MPIN verification completes, 3) Beneficiary authentication succeeds. Properties: flow (bene_setup), type (mpin). Purpose: Track MPIN entry success rates, measure authentication completion, analyze security verification effectiveness. Screens: ManageBeneficiaryAnalytics.mpinEntered(). Scenarios: MPIN authentication success, verification completion, beneficiary security verification."
"simbinding_screen_open","SIM binding onboarding screen event. Triggered when: 1) SIM binding permission screen opens, 2) User enters SIM binding flow, 3) Device binding permissions displayed. Properties: screen (permission_page/loader_screen), is_bottom_sheet (false), module_index, cta_count, flow, product, module (combined_sim_binding). Purpose: Track SIM binding flow entry, measure permission screen engagement, analyze device binding patterns. Screens: PlatformSimbindingEventUtils.trackScreenOpen(). Scenarios: SIM binding start, permission requests, device binding flow."
"simbinding_back_press","SIM binding back navigation event. Triggered when: 1) User presses back on SIM binding screen, 2) SIM binding flow exit, 3) Navigation back from binding step. Properties: screen (permission_page), back_type (system/cta_back), module context. Purpose: Track SIM binding abandonment rates, measure back navigation patterns, analyze binding flow exits. Screens: PlatformSimbindingEventUtils.trackBackPress(). Scenarios: Back navigation, binding flow abandonment, user exit tracking."
"simbinding_api_error","SIM binding API error event. Triggered when: 1) API errors during SIM binding, 2) Network failures in binding flow, 3) SIM binding request failures. Properties: screen (loader_screen), api (endpoint URL). Purpose: Track SIM binding technical issues, measure API reliability, analyze binding error patterns. Screens: PlatformSimbindingEventUtils.trackApiError(). Scenarios: API failures, network errors, SIM binding issues."
"simbinding_message","SIM binding flow message event. Triggered when: 1) SIM binding flow messages displayed, 2) Status updates in binding process, 3) User notifications in binding flow. Properties: screen (context screen), message (message content). Purpose: Track SIM binding flow communication, measure message effectiveness, analyze user guidance patterns. Screens: PlatformSimbindingEventUtils.trackMessage(). Scenarios: Binding status updates, user guidance, flow messages."
"simbinding_missing_data","SIM binding missing data event. Triggered when: 1) Required SIM binding data missing, 2) Configuration errors in binding flow, 3) Missing CTA targets or data. Properties: screen (context screen), message (missing data details). Purpose: Track SIM binding configuration issues, measure data completeness, analyze missing data patterns. Screens: PlatformSimbindingEventUtils.trackMissingData(). Scenarios: Configuration errors, missing data, binding setup issues."
"selfie_completed","Selfie verification completion event. Triggered when: 1) Selfie verification completes (success/failure), 2) HVT selfie authentication finishes, 3) Selfie capture and verification process ends. Properties: status (success/failure). Purpose: Track selfie verification success rates, measure authentication completion, analyze selfie verification effectiveness. Screens: SelfieVerificationHeadlessViewModel.trackSelfieCompletedEvent(). Scenarios: Selfie authentication completion, verification success/failure, HVT authentication tracking."
"aa_web_view_started","Account Aggregator web view initiation event. Triggered when: 1) AA web iframe loads successfully, 2) Bank web interface starts, 3) AA vendor web view begins. Properties: screen (web), bank (bank name), aa (AA provider), vendor (ignosis/finvu), module context. Purpose: Track AA web integration success, measure vendor performance, analyze bank-specific web loading. Screens: PlatformWebEventUtil.trackWebViewOpenEvents(). Scenarios: AA web view loading, bank interface start, vendor integration success."
"aa_web_view_failed","Account Aggregator web view failure event. Triggered when: 1) AA web iframe fails to load, 2) Bank web interface errors, 3) AA vendor web view loading issues. Properties: screen (web), bank (bank name), aa (AA provider), vendor (ignosis/finvu), error (failure reason), module context. Purpose: Track AA web integration failures, measure vendor reliability, analyze bank-specific loading issues. Screens: PlatformWebEventUtil.trackWebViewOpenEvents(). Scenarios: AA web view failures, bank interface errors, vendor integration issues."
"aa_otp_sent","Account Aggregator OTP dispatch event. Triggered when: 1) OTP sent during AA login/signup, 2) Bank authentication OTP dispatched, 3) AA flow OTP generation. Properties: screen (web), aa (AA provider), vendor (ignosis/finvu), type (login/signup), module context. Purpose: Track AA OTP delivery success, measure authentication flow progress, analyze OTP dispatch patterns. Screens: PlatformWebEventUtil.trackWebViewOtpAndLoginEvents(). Scenarios: AA OTP delivery, login/signup authentication, bank OTP dispatch."
"aa_login_successful","Account Aggregator login success event. Triggered when: 1) User successfully logs into bank via AA, 2) AA authentication completes, 3) Bank login verification succeeds. Properties: screen (web), aa (AA provider), vendor (ignosis/finvu), type (login/signup), module context. Purpose: Track AA login success rates, measure authentication effectiveness, analyze bank-specific login patterns. Screens: PlatformWebEventUtil.trackWebViewOtpAndLoginEvents(). Scenarios: AA login success, bank authentication completion, user verification success."
"aa_login_failed","Account Aggregator login failure event. Triggered when: 1) User login fails via AA, 2) AA authentication errors, 3) Bank login verification fails. Properties: screen (web), aa (AA provider), vendor (ignosis/finvu), type (login/signup), error (failure reason), module context. Purpose: Track AA login failure rates, measure authentication issues, analyze bank-specific login problems. Screens: PlatformWebEventUtil.trackWebViewOtpAndLoginEvents(). Scenarios: AA login failures, bank authentication errors, user verification issues."
"aa_bank_otp_failed","Account Aggregator bank OTP failure event. Triggered when: 1) Bank OTP verification fails, 2) AA bank linking OTP errors, 3) Account linking OTP validation issues. Properties: screen (web), aa (AA provider), vendor (ignosis/finvu), module context. Purpose: Track bank OTP verification issues, measure linking success rates, analyze OTP-related failures. Screens: PlatformWebEventUtil.trackWebViewOtpAndLoginEvents(). Scenarios: Bank OTP failures, account linking issues, OTP verification problems."
"aa_otp_resent","Account Aggregator OTP resend event. Triggered when: 1) OTP resent during AA flow, 2) User requests OTP resend, 3) AA flow OTP retry action. Properties: screen (web), aa (AA provider), vendor (ignosis/finvu), module context. Purpose: Track OTP resend patterns, measure OTP delivery issues, analyze user retry behavior. Screens: PlatformWebEventUtil.trackWebViewOtpAndLoginEvents(). Scenarios: OTP resend requests, delivery retry, user OTP actions."
"aa_consent_screen_cta_clicked","Account Aggregator consent action event. Triggered when: 1) User clicks approve/reject on consent screen, 2) Consent decision made, 3) AA consent CTA interaction. Properties: screen (web), aa (AA provider), vendor (ignosis/finvu), module context. Purpose: Track consent interaction patterns, measure consent approval rates, analyze user consent behavior. Screens: PlatformWebEventUtil.trackWebViewOtpAndLoginEvents(). Scenarios: Consent approval/rejection, user consent decisions, AA consent interactions."
"aa_skipped","Account Aggregator journey skip event. Triggered when: 1) User skips AA journey, 2) AA flow abandoned, 3) Account aggregation bypassed. Properties: screen (web), aa (AA provider), vendor (ignosis/finvu), module context. Purpose: Track AA skip rates, measure journey abandonment, analyze user bypass patterns. Screens: PlatformWebEventUtil.trackWebViewOtpAndLoginEvents(). Scenarios: AA journey skipping, flow abandonment, user bypass behavior."
"aa_change_phone_screen_open","Account Aggregator phone number change screen event. Triggered when: 1) Phone number change screen opens in AA flow, 2) User enters phone modification, 3) AA phone number update interface displays. Properties: screen (context screen), vendor (ignosis), module_index, cta_count, flow, product, module (enter_phone). Purpose: Track AA phone number change engagement, measure modification patterns, analyze vendor-specific phone updates. Screens: PlatformPhoneNumberEventUtil.trackScreenOpen(). Scenarios: AA phone number changes, contact modification, vendor-specific updates."
"aa_change_phone_screen_continue","Account Aggregator phone number change continue event. Triggered when: 1) User clicks continue after phone number change, 2) Phone modification confirmation, 3) AA phone update submission. Properties: screen (context screen), vendor (ignosis), cta_action (click), cta_text (button text), cta_target_type/resource, module context. Purpose: Track AA phone change completion rates, measure update success, analyze phone modification patterns. Screens: PlatformPhoneNumberEventUtil.trackCtaClick(). Scenarios: Phone change confirmation, number update completion, AA contact modification."
"search_field_opened","Selection search field opening event. Triggered when: 1) Search field screen opens, 2) User enters search interface, 3) Selection search functionality displays. Properties: user_type (salaried/student/freelancer based on context), module context. Purpose: Track search field engagement, measure search usage patterns, analyze user type search behavior. Screens: PlatformSelectionEventUtil.trackScreenOpen(). Scenarios: Search interface access, selection search start, user search engagement."
"search_field_type","Selection search field interaction event. Triggered when: 1) User clicks on search field, 2) Search interaction starts, 3) Search field focus action. Properties: user_type (salaried/student/freelancer), cta_action (search_start), module context. Purpose: Track search field interaction patterns, measure search initiation, analyze user search behavior. Screens: PlatformSelectionEventUtil.trackSearchFieldClick(). Scenarios: Search field clicks, search initiation, user search interactions."
"aa_bank_search_bank_not_found","Account Aggregator bank search not found event. Triggered when: 1) Bank search returns no results in AA flow, 2) Bank not found in AA vendor list, 3) AA bank search failure. Properties: vendor (ignosis/finvu), module context. Purpose: Track AA bank search failures, measure bank coverage gaps, analyze vendor-specific search issues. Screens: PlatformSelectionEventUtil.trackScreenOpen(). Scenarios: AA bank search failures, bank not found, vendor search limitations."
"aa_bank_not_supported_cta","Account Aggregator bank not supported CTA event. Triggered when: 1) User clicks CTA for unsupported bank, 2) Bank not supported action taken, 3) AA bank limitation acknowledgment. Properties: vendor (ignosis/finvu), bank (searched bank), screen (context), cta_action (click), cta_text, module context. Purpose: Track unsupported bank interactions, measure bank coverage issues, analyze user responses to limitations. Screens: PlatformSelectionEventUtil.trackBankNotSupported(). Scenarios: Unsupported bank actions, bank limitation handling, user workaround attempts."
"selection_input_action","Selection input field action event. Triggered when: 1) User interacts with input fields in selection flow, 2) Input field focus/interaction, 3) Selection form field actions. Properties: module context. Purpose: Track input field engagement, measure form interaction patterns, analyze user input behavior. Screens: PlatformSelectionEventUtil.trackCitySearchFieldClicked(). Scenarios: Input field interactions, form engagement, selection input actions."
"selection_popup_open","Selection popup opening event. Triggered when: 1) Popup or modal opens in selection flow, 2) Selection dialog displays, 3) Popup interface shows. Properties: module context. Purpose: Track popup engagement, measure modal usage patterns, analyze popup interaction effectiveness. Screens: PlatformSelectionEventUtil.trackPopUpOpen(). Scenarios: Popup displays, modal interactions, selection dialogs."
"txn_api_response","Transaction API response tracking event. Triggered when: 1) Transaction API calls complete (success/failure), 2) UPI/Banking API responses received, 3) Payment gateway API status updates. Properties: path (API endpoint), status (success/failure), failure_reason (error message), trace_id, intent_id. Purpose: Track transaction API reliability, measure payment success rates, analyze API performance across transaction flows. Screens: TransactionsRepositoryImpl, ApiErrorLoggingDelegate. Scenarios: UPI transactions, payment processing, banking API calls, transaction status polling."
"upi_transaction_initiated","UPI transaction initiation event. Triggered when: 1) User starts UPI payment flow, 2) Transaction authentication screen opens, 3) Payment verification begins. Properties: flow (payment method), upi_transaction_type (account type), payment_verification (auth mode - mpin/npci_pin/selfie). Purpose: Track UPI transaction flow starts, measure auth method usage, analyze payment initiation patterns. Screens: TransactionAnalyticsDelegate.trackUpiTransactionInitiated(). Scenarios: UPI payment start, authentication method selection, transaction flow entry."
"upi_txn_intent","UPI transaction intent tracking event. Triggered when: 1) QR scan string upload completes, 2) Payment intent creation succeeds, 3) Transaction request validation passes. Properties: upi_request_id (transaction ID), account_selected (account type), vpa (payee VPA), intent_id (payment intent), intent_type (payment type). Purpose: Track QR scan success rates, measure intent creation efficiency, analyze payment intent patterns. Screens: TransactionAnalyticsDelegate.trackQrScanStringUpload(). Scenarios: QR code scanning, payment intent creation, VPA validation."
"tpap_logger","TPAP (Third Party Account Provider) logging event. Triggered when: 1) TPAP flow events occur, 2) External bank account interactions, 3) Payment processing via third-party accounts. Properties: custom properties map with TPAP-specific data. Purpose: Track TPAP integration performance, measure third-party account usage, analyze external banking flow efficiency. Screens: TransactionAnalyticsDelegate.addTpapLogger(). Scenarios: External account payments, third-party banking integration, TPAP flow tracking."
"rtgs_offline_auth_bottomsheet_cta","RTGS offline authentication bottomsheet CTA event. Triggered when: 1) User clicks CTA on RTGS offline auth bottomsheet, 2) RTGS authentication flow continues, 3) Offline RTGS payment method selected. Properties: cta context. Purpose: Track RTGS offline flow engagement, measure authentication CTA effectiveness, analyze offline payment adoption. Screens: TransactionAnalyticsDelegate.trackRtgsBottomSheetCtaClicked(). Scenarios: RTGS offline payments, authentication flow, offline banking method selection."
"bottomsheet_view","Transaction confirmation nudge bottomsheet view event. Triggered when: 1) Bootstrap confirmation nudge displays, 2) Transaction confirmation bottomsheet opens, 3) Payment verification dialog shows. Properties: type (nudge category), journey (transaction), flow (payment flow context). Purpose: Track transaction confirmation nudge usage, measure verification dialog engagement, analyze payment confirmation patterns. Screens: TransactionAnalyticsDelegate.logBootstrapConfirmationNudgeShown(). Scenarios: Payment confirmations, transaction verification, nudge displays."
"transaction_toast_message","Transaction toast message display event. Triggered when: 1) Transaction toast notifications shown, 2) Payment status messages displayed, 3) Transaction feedback toasts appear. Properties: message_displayed (toast content). Purpose: Track transaction notification patterns, measure toast message effectiveness, analyze user feedback communication. Screens: TransactionAnalyticsDelegate.logToastMessageShown(). Scenarios: Payment status updates, transaction feedback, error notifications."
"bottomsheet_cta_clicked","Transaction confirmation nudge CTA click event. Triggered when: 1) User clicks CTA on transaction confirmation bottomsheet, 2) Payment verification action taken, 3) Transaction confirmation dialog interaction. Properties: journey (transaction), flow (payment flow), cta (clicked action). Purpose: Track transaction confirmation CTA effectiveness, measure verification action rates, analyze payment confirmation behavior. Screens: TransactionAnalyticsDelegate.logBootstrapConfirmationNudgeCtaClick(). Scenarios: Payment confirmations, transaction verification actions, nudge interactions."
"tnc_consent_screen_open","Terms and Conditions consent screen opening event. Triggered when: 1) TnC consent screen displays, 2) User enters consent flow, 3) Terms acceptance interface opens. Properties: screen (TncConsent), is_bottom_sheet (false), module_index, cta_count, flow, product, module (TNC_CONSENT). Purpose: Track TnC consent flow entry, measure consent screen engagement, analyze terms acceptance patterns. Screens: PlatformTncScreenEventUtil.trackScreenOpen(). Scenarios: Terms consent flow, legal agreement screens, compliance consent."
"tnc_consent_cta_click","Terms and Conditions consent CTA click event. Triggered when: 1) User clicks proceed/accept on TnC screen, 2) Consent submission action, 3) Terms acceptance confirmation. Properties: screen (TncConsent), cta_action (click), cta_type (primary), cta_text (button text), module context. Purpose: Track TnC consent completion rates, measure acceptance CTA effectiveness, analyze consent submission patterns. Screens: PlatformTncScreenEventUtil.trackProceedClick(). Scenarios: Terms acceptance, consent confirmations, legal agreement submissions."
"tnc_consent_back_press","Terms and Conditions consent back navigation event. Triggered when: 1) User presses back on TnC screen, 2) Consent flow exit, 3) Navigation back from terms screen. Properties: screen (TncConsent), back_type (system/cta_back), module context. Purpose: Track TnC consent abandonment rates, measure back navigation patterns, analyze consent flow exits. Screens: PlatformTncScreenEventUtil.trackBackPress(). Scenarios: Consent flow abandonment, back navigation, terms screen exits."
"tnc_consent_api_error","Terms and Conditions consent API error event. Triggered when: 1) API errors during TnC submission, 2) Network failures in consent flow, 3) Terms acceptance request failures. Properties: screen (TncConsent), api (endpoint URL), error_message (error details), module context. Purpose: Track TnC consent technical issues, measure API reliability, analyze consent submission errors. Screens: PlatformTncScreenEventUtil.trackApiError(). Scenarios: API failures, consent submission errors, network issues."
"ekyc_aadhaar_screen_open","eKYC Aadhaar verification screen opening event. Triggered when: 1) Aadhaar/VID entry screen displays, 2) User enters eKYC verification flow, 3) Identity verification interface opens. Properties: screen (ekyc), module_index, cta_count, flow, product, module (ekyc_aadhaar). Purpose: Track eKYC flow entry, measure Aadhaar verification engagement, analyze identity verification patterns. Screens: PlatformEkycAadhaarEventUtil.trackScreenOpen(). Scenarios: Aadhaar verification, VID entry, eKYC flow start."
"ekyc_aadhaar_error_shown","eKYC Aadhaar validation error event. Triggered when: 1) Aadhaar/VID validation errors occur, 2) Invalid identity numbers entered, 3) eKYC verification failures. Properties: screen (ekyc), error_message (validation error), aadhaar_type (aadhaar/vid based on number length), module context. Purpose: Track eKYC validation issues, measure identity verification errors, analyze Aadhaar/VID input problems. Screens: PlatformEkycAadhaarEventUtil.trackErrorShown(). Scenarios: Validation failures, identity verification errors, number format issues."
"accounts_bottomsheet_opened","Platform accounts bottomsheet opening event. Triggered when: 1) Account selection bottomsheet displays, 2) User views available accounts, 3) Payment account options shown. Properties: tpap_status (onboarded/not_onboarded), number_of_bank_accounts, tpap_enabled, page_source, account_shown, custom properties. Purpose: Track account selection engagement, measure TPAP adoption, analyze account usage patterns. Screens: AccountsBsEventUtils.trackBottomSheetOpened(). Scenarios: Account selection, payment method choice, TPAP account access."
"accounts_bottomsheet_dismissed","Platform accounts bottomsheet dismissal event. Triggered when: 1) User dismisses account selection bottomsheet, 2) Account selection cancelled, 3) Payment method selection abandoned. Properties: page_source (source screen context). Purpose: Track account selection abandonment rates, measure bottomsheet dismissal patterns, analyze payment method selection behavior. Screens: AccountsBsEventUtils.trackBottomSheetDismissed(). Scenarios: Account selection cancellation, payment method abandonment, bottomsheet dismissal."
"accounts_bottomsheet_option_selected","Platform accounts bottomsheet option selection event. Triggered when: 1) User selects account option, 2) Payment method chosen, 3) Account type selection made. Properties: option_selected (activate_slice_account/add_tpap_account/bank_account/activate_savings_account), page_source (source context). Purpose: Track account selection preferences, measure payment method adoption, analyze account type usage patterns. Screens: AccountsBsEventUtils.trackBottomSheetOptionSelected(). Scenarios: Account type selection, payment method choice, account activation."
"accounts_bottomsheet_cta_clicked","Platform accounts bottomsheet CTA click event. Triggered when: 1) User clicks action button on account selection, 2) Account-related CTA triggered, 3) Payment method action confirmed. Properties: account_selected (selected account type), custom properties. Purpose: Track account selection CTA effectiveness, measure action completion rates, analyze account-related interactions. Screens: AccountsBsEventUtils.trackBottomCtaClicked(). Scenarios: Account confirmations, payment method actions, account-related CTA clicks."
"app_pil_api_error","App PIL (Payment Infrastructure Layer) API error event. Triggered when: 1) PIL API calls fail, 2) Payment infrastructure errors, 3) Banking service API issues. Properties: path (API endpoint), failure_reason (error message), status (failure). Purpose: Track payment infrastructure reliability, measure API error rates, analyze banking service issues. Screens: ApiErrorLoggingDelegate.logApiFailureEvent(). Scenarios: Payment API failures, banking service errors, infrastructure issues."
"card_api_error","""Card Management API error tracking event. Triggered when: 1) Card management API calls fail, 2) Network requests encounter errors, 3) Card operations (freeze/unfreeze/pin setting) fail. Properties: path (API endpoint), failure_reason (error message), status (failure), trace_id, card_type. Purpose: Track card management API reliability, measure card operation success rates, analyze API failure patterns. Screens: CardManagementRepositoryImpl, ApiErrorLoggingDelegate. Scenarios: Card freeze operations, PIN setting, limit updates, card booking failures, delivery address validation."""
"avc_page_loaded","""Activity Center page loaded event. Triggered when: 1) AVC main screen loads successfully, 2) Transaction data is fetched and displayed, 3) Activity center initialization completes. Properties: autopay_shown (boolean), to_do_shown (boolean), is_connected (network status), screen (activity_centre). Purpose: Track AVC screen load performance, measure autopay feature visibility, analyze user onboarding to activity center. Screens: AvcViewModel.initialize(), AvcFragment. Scenarios: AVC first load, refresh after network reconnection, post-login AVC access."""
"bottomsheet_view","""AVC bottom sheet view event. Triggered when: 1) Information bottom sheets appear in AVC, 2) Spend analytics explainer sheets open, 3) Location permission guidance shows. Properties: flow (spend_analytics/enable_location), cta (button text), title (sheet title), subtitle (description), location (activity_centre). Purpose: Track bottom sheet engagement, measure explainer effectiveness, analyze user education flows. Screens: SpendAnalyticsFtueBottomSheetFragment, LocationInfoBottomSheet. Scenarios: First-time spend analytics introduction, location permission education, feature explanations."""
"bottomsheet_cta_clicked","""AVC bottom sheet CTA click event. Triggered when: 1) User clicks action buttons in bottom sheets, 2) Proceed/Continue actions in explainers, 3) Permission grant actions. Properties: flow (context), cta (button text), location (activity_centre). Purpose: Track bottom sheet conversion rates, measure CTA effectiveness, analyze user intent to engage. Screens: Bottom sheet CTA handlers. Scenarios: Spend analytics enablement, location permission grants, feature activation flows."""
"activity_centre_clicked","""Activity Center main entry event. Triggered when: 1) User taps Activity Center icon/menu, 2) AVC screen navigation occurs, 3) Deep link to activity center. Properties: source (navigation origin), screen context. Purpose: Track AVC entry points, measure feature adoption, analyze navigation patterns. Screens: Navigation handlers to AVC. Scenarios: Home screen AVC icon tap, menu navigation, deep link entry, push notification tap."""
"activity_centre_search_clicked","""AVC search initiation event. Triggered when: 1) User taps search icon in AVC, 2) Search mode activation, 3) Search UI expansion. Properties: screen (activity_centre). Purpose: Track search feature usage, measure search intent, analyze search adoption. Screens: AVC search bar. Scenarios: Transaction search initiation, activity lookup, search mode activation."""
"activity_centre_search","""AVC search execution event. Triggered when: 1) Search query is executed, 2) Search results are returned, 3) Search completion with results count. Properties: search_result (boolean - has results), query_length, result_count. Purpose: Track search effectiveness, measure search success rates, analyze search patterns. Screens: AVC search functionality. Scenarios: Transaction search execution, activity filtering, search result generation."""
"spend_analytics_launch","""Spend Analytics feature launch event. Triggered when: 1) User accesses spend analytics from AVC icon, 2) Launch from explore section, 3) Bottom sheet CTA click to analytics. Properties: flow (icon/explore/bottomsheet). Purpose: Track spend analytics adoption, measure entry point effectiveness, analyze feature engagement. Screens: Spend analytics navigation. Scenarios: Icon-based launch, explore page access, promotional bottom sheet conversion."""
"app_open_screen_error","""AVC screen error tracking event. Triggered when: 1) AVC API failures occur, 2) Network connectivity issues, 3) Screen loading errors. Properties: screen (activity_centre), reason (api_failure/network_failure), explanation (error message), endpoint (API path), error_code (HTTP status). Purpose: Track AVC reliability, measure error rates, analyze failure patterns. Screens: AVC error handling. Scenarios: API timeouts, network disconnections, server errors, parsing failures."""
"avc_tab_switch","""AVC tab selection event. Triggered when: 1) User switches between AVC tabs, 2) Tab navigation in activity center, 3) Content filtering by tab. Properties: tab_clicked (tab identifier). Purpose: Track tab usage patterns, measure content preferences, analyze navigation behavior. Screens: AVC tab navigation. Scenarios: All/Debits/Credits tab switching, subscription tab access, content filtering."""
"auto_details_page_open","""AVC subscription details view event. Triggered when: 1) User taps subscription item in AVC, 2) Auto-payment details screen opens, 3) Subscription management access. Properties: subscription_id (unique identifier). Purpose: Track subscription engagement, measure subscription management usage, analyze auto-payment interest. Screens: AVC subscription details. Scenarios: Subscription detail view, auto-payment management, subscription status checking."""
"to_do_clicked","""AVC to-do item click event. Triggered when: 1) User clicks to-do items in AVC, 2) Action nudges are tapped, 3) Task completion flows. Properties: page (activity_centre), flow (task type). Purpose: Track to-do engagement, measure task completion rates, analyze user productivity. Screens: AVC to-do section. Scenarios: Location enablement tasks, permission grants, feature setup completion."""
"reload_triggered","""AVC reload action event. Triggered when: 1) User initiates refresh in AVC, 2) Pull-to-refresh gesture, 3) Retry after error states. Properties: is_connected (network status), source (generic_error/network_error/partial_error_bar). Purpose: Track reload patterns, measure error recovery, analyze user persistence. Screens: AVC refresh mechanisms. Scenarios: Pull-to-refresh, error retry, network reconnection refresh."""
"nudge_shown","""AVC nudge display event. Triggered when: 1) Educational nudges appear in AVC, 2) Location permission prompts show, 3) Feature introduction banners. Properties: nudge_type (to_do), event_value (location_permission), location (activity_centre), cta/title/subtitle (content). Purpose: Track nudge effectiveness, measure education impact, analyze user guidance. Screens: AVC nudge components. Scenarios: Location permission education, feature introductions, task reminders."""
"cold_startup_time","""App startup performance tracking event. Triggered when: 1) App cold start completes, 2) First screen draw occurs, 3) Performance metrics collection. Properties: time_to_first_draw, cold_startup_time, time_content_provider_to_app_start, first_activity_name. Purpose: Track app launch performance, measure startup optimization, analyze cold start patterns. Screens: App startup flow. Scenarios: App launch from device restart, first install launch, background-to-foreground transitions."""
"onboarding_started","""Platform onboarding initiation event. Triggered when: 1) Onboarding flow begins, 2) User enters platform onboarding, 3) Onboarding central coordination starts. Properties: source (entry point), flow_type (onboarding type). Purpose: Track onboarding entry points, measure flow initiation, analyze user onboarding patterns. Screens: OnboardingCentralViewmodel. Scenarios: New user onboarding, account upgrade flows, feature-specific onboarding."""
"screen_open","""Generic platform screen open event. Triggered when: 1) Platform onboarding screens load, 2) Employment details verification opens, 3) Banking PDP screens display. Properties: screen (screen type), module (platform module), flow/flow_type, product, is_bottom_sheet. Purpose: Track screen navigation, measure screen engagement, analyze user journey flows. Screens: All platform onboarding screens. Scenarios: Employment verification, banking PDP, delight screens, terminal phases."""
"cta_click","""Platform CTA interaction event. Triggered when: 1) User clicks Continue/Proceed buttons, 2) Form submission actions, 3) Navigation CTA taps. Properties: cta_action (click), cta_text (button text), cta_type (primary/secondary), screen, cta_target_type/resource. Purpose: Track CTA effectiveness, measure conversion rates, analyze user intent progression. Screens: All platform onboarding CTAs. Scenarios: Employment confirmation, banking upgrade, delight actions, terminal navigation."""
"back_press","""Platform back navigation event. Triggered when: 1) System back button pressed, 2) App bar back navigation, 3) Gesture-based back actions. Properties: back_type (system/app), screen (current screen), module context. Purpose: Track navigation patterns, measure back button usage, analyze user flow interruptions. Screens: All platform screens with back navigation. Scenarios: Employment details back, banking PDP back, onboarding flow back navigation."""
"api_error","""Platform API error tracking event. Triggered when: 1) Platform API calls fail, 2) Network requests encounter errors, 3) Server responses with error codes. Properties: api (endpoint), error_message (failure reason), screen (current screen), module context. Purpose: Track API reliability, measure platform stability, analyze error patterns. Screens: All platform API integrations. Scenarios: Employment verification failures, banking API errors, onboarding service failures."""
"op_message","""Platform operational message event. Triggered when: 1) Loader state messages appear, 2) System status updates, 3) Operational feedback display. Properties: message (content), screen (current screen), module context. Purpose: Track system communication, measure user feedback, analyze operational status patterns. Screens: Platform loader screens. Scenarios: Verification in progress, data processing states, system status updates."""
"op_missing_data","""Platform missing data tracking event. Triggered when: 1) Required data is unavailable, 2) Configuration missing scenarios, 3) Data validation failures. Properties: message (missing data description), screen context. Purpose: Track data completeness, measure configuration issues, analyze missing data patterns. Screens: Platform data-dependent screens. Scenarios: Missing onboarding config, incomplete user data, validation failures."""
"passbook_page_open","""Passbook home screen open event. Triggered when: 1) Passbook main page loads successfully, 2) User navigates to passbook section, 3) Savings account passbook access. Properties: source (entry point), load_time (page load duration), error (if page render fails). Purpose: Track passbook usage patterns, measure page load performance, analyze passbook accessibility. Screens: PassbookHomeFragment, PassbookViewModel.trackPageRenderSuccess(). Scenarios: Direct passbook navigation, savings account passbook access, statement viewing flows."""
"passbook_download_clicked_response","""Passbook PDF download response event. Triggered when: 1) PDF download completes or fails, 2) Document generation response received, 3) Download URL fetch outcomes. Properties: status (success/failure), failure_reason (error details), response_time (download duration). Purpose: Track download success rates, measure download performance, analyze download failure patterns. Screens: PassbookViewModel.downloadStatement(). Scenarios: Successful PDF downloads, download failures, network-related download issues."""
"passbook_email_clicked_response","""Passbook email delivery response event. Triggered when: 1) Email statement API response received, 2) Email delivery success or failure, 3) Statement sharing completion. Properties: status (success/failure), failure_reason (error message). Purpose: Track email delivery success rates, measure statement sharing effectiveness, analyze email delivery issues. Screens: PassbookViewModel.mailStatementToUser(). Scenarios: Successful email delivery, email delivery failures, sharing flow completion."""
"passbook_download_back_clicked","""Passbook download interruption event. Triggered when: 1) User presses back during download, 2) Download process cancelled, 3) Navigation away from download screen. Properties: none. Purpose: Track download abandonment patterns, measure user patience during downloads, analyze download UX issues. Screens: PassbookViewModel.trackDeviceBackPressedDuringDownload(). Scenarios: Download cancellation, impatient user behavior, download flow interruption."""
"passbook_txn_fetch_failure","""Passbook transaction fetch failure event. Triggered when: 1) Transaction list API fails, 2) Pagination requests fail, 3) Data loading errors in passbook. Properties: error (failure reason). Purpose: Track passbook data reliability, measure API failure rates, analyze transaction loading issues. Screens: PassbookViewModel.trackPageRenderFailure(). Scenarios: API timeouts, network failures, server errors during transaction fetch."""
"perf_passbook_pdf_download_time","""Passbook PDF download performance event. Triggered when: 1) PDF download completes successfully, 2) Download timing measurement, 3) Performance monitoring. Properties: time_taken (download duration in ms). Purpose: Track download performance, measure system efficiency, analyze download speed patterns. Screens: PassbookViewModel.trackDownloadTimeTaken(). Scenarios: Performance monitoring, download optimization analysis, system performance tracking."""
"keypad_open","""Banking keypad activation event. Triggered when: 1) Amount input keypad opens, 2) Numeric input screens display, 3) Banking form inputs activate. Properties: flow (deposit_standard/deposit_custom), amount, button_state (enabled/disabled). Purpose: Track input interaction patterns, measure keypad usage, analyze banking form engagement. Screens: BankAnalyticsHelper banking flows. Scenarios: Deposit amount entry, payment input, form completion flows."""
"keypad_closed","""Banking keypad dismissal event. Triggered when: 1) Keypad input completes, 2) User dismisses numeric input, 3) Form input finalization. Properties: flow, amount_error (validation issues), button_state. Purpose: Track input completion patterns, measure form interaction success, analyze input abandonment. Screens: Banking keypad interfaces. Scenarios: Successful input completion, keypad dismissal, form validation errors."""
"sa_homepage_open","""Savings Account homepage access event. Triggered when: 1) Savings account main page opens, 2) User navigates to SA dashboard, 3) SA feature access. Properties: source (navigation origin). Purpose: Track SA feature adoption, measure homepage engagement, analyze user SA journey. Screens: Banking SA homepage. Scenarios: Direct SA navigation, dashboard access, account overview viewing."""
"balance_rotation_completed","""Balance rotation animation completion event. Triggered when: 1) Balance display rotation finishes, 2) Amount visibility toggle completes, 3) Balance animation cycles. Properties: rotation_duration (animation time). Purpose: Track UI animation performance, measure user interaction with balance display, analyze animation effectiveness. Screens: Balance display components. Scenarios: Balance reveal animations, privacy toggle interactions, UI animation completion."""
"sa_details_page_open","""Savings Account details page access event. Triggered when: 1) SA details screen opens, 2) Account information viewing, 3) Detailed SA data access. Properties: account_id, source. Purpose: Track detailed account engagement, measure information access patterns, analyze SA details usage. Screens: SA details screens. Scenarios: Account detail viewing, transaction detail access, comprehensive account information."""
"perf_deposit_creation_time","""Deposit creation performance tracking event. Triggered when: 1) Deposit process completes, 2) Performance measurement during deposit, 3) Deposit timing analysis. Properties: time_taken (creation duration), transaction_status. Purpose: Track deposit performance, measure system efficiency, analyze deposit processing speed. Screens: Deposit creation flows. Scenarios: Performance monitoring, deposit optimization, system performance analysis."""
"api_failure","""Banking API failure tracking event. Triggered when: 1) Banking APIs encounter errors, 2) Network requests fail, 3) Service unavailability. Properties: endpoint, error_message, error_code. Purpose: Track banking system reliability, measure API health, analyze service failures. Screens: All banking API integrations. Scenarios: API timeouts, server errors, network connectivity issues."""
"txn_api_response","""Payment Gateway API response tracking event. Triggered when: 1) Payment API calls complete, 2) Transaction processing responses, 3) Gateway communication results. Properties: path (API endpoint), failure_reason (error details), status (success/failure). Purpose: Track payment system reliability, measure transaction success rates, analyze payment API performance. Screens: Payment gateway integrations. Scenarios: Payment processing, transaction status updates, gateway API monitoring."""
"manage_beneficiary_page_opened","""Beneficiary management page access event. Triggered when: 1) Manage beneficiary screen opens, 2) User accesses beneficiary management, 3) Beneficiary module entry. Properties: none. Purpose: Track beneficiary management feature usage, measure user engagement with beneficiary features, analyze management tool adoption. Screens: BeneficiaryManagementFragment. Scenarios: Beneficiary management access, payment setup flows, recipient management."""
"manage_beneficiary_tile_clicked","""Beneficiary tile selection event. Triggered when: 1) User clicks on beneficiary tiles, 2) Beneficiary selection actions, 3) Recipient item interaction. Properties: tile_number_clicked (index), tile_type (beneficiary type). Purpose: Track beneficiary selection patterns, measure user preferences in recipient management, analyze beneficiary interaction. Screens: Beneficiary list interface. Scenarios: Beneficiary selection, recipient management, payment setup flows."""
"manage_beneficiary_details_bottomsheet_opened","""Beneficiary details bottom sheet display event. Triggered when: 1) Beneficiary details sheet opens, 2) Detailed beneficiary information view, 3) Recipient information access. Properties: tile_type, account details from beneficiary data. Purpose: Track detailed beneficiary engagement, measure information access patterns, analyze beneficiary detail usage. Screens: Beneficiary details bottom sheet. Scenarios: Beneficiary information viewing, recipient detail access, management detail flows."""
"manage_beneficiary_limit_change_bottomsheet_opened","""Beneficiary limit modification bottom sheet event. Triggered when: 1) Limit change interface opens, 2) Transaction limit modification, 3) Beneficiary settings adjustment. Properties: type (txn_amount/txn_count). Purpose: Track limit modification usage, measure beneficiary management engagement, analyze limit change patterns. Screens: Limit change bottom sheet. Scenarios: Transaction limit updates, beneficiary settings modification, limit management flows."""
"manage_beneficiary_limit_change_bottomsheet_continue_clicked","""Beneficiary limit change confirmation event. Triggered when: 1) Limit change continue button clicked, 2) Limit modification confirmation, 3) Beneficiary setting updates. Properties: type (txn_amount/txn_count), day_txn_amount_limit or day_txn_count_limit (new limit values). Purpose: Track limit change completions, measure beneficiary management success, analyze limit modification patterns. Screens: Limit change confirmation. Scenarios: Limit updates, beneficiary management completion, transaction limit modifications."""
"manage_beneficiary_bottomsheet_remove_clicked","""Beneficiary removal action event. Triggered when: 1) Remove beneficiary button clicked, 2) Beneficiary deletion action, 3) Recipient removal confirmation. Properties: none. Purpose: Track beneficiary removal patterns, measure recipient management actions, analyze beneficiary lifecycle. Screens: Beneficiary management bottom sheet. Scenarios: Beneficiary removal, recipient cleanup, management actions."""
"toast_message","""General toast message display event. Triggered when: 1) Toast notifications appear, 2) System messages display, 3) User feedback notifications. Properties: message_displayed (content), screen (current screen context). Purpose: Track user feedback patterns, measure notification effectiveness, analyze system communication. Screens: Various screens with toast notifications. Scenarios: Success messages, error notifications, system feedback."""
"screen_open","""Platform screen access tracking event. Triggered when: 1) Platform screens open, 2) Navigation to new screens, 3) Screen loading completion. Properties: screen (screen type), module (platform module), is_bottom_sheet (boolean), flow/flow_type, product. Purpose: Track screen navigation patterns, measure user journey flows, analyze platform engagement. Screens: All platform screens. Scenarios: Screen navigation, user journey tracking, platform usage analysis."""
"input_action","""User input interaction tracking event. Triggered when: 1) Users interact with input fields, 2) Text input changes occur, 3) Form field modifications. Properties: mode (start/finish/delete/restart), input_name (field identifier), system_prompt (validation messages). Purpose: Track input interaction patterns, measure form engagement, analyze user input behavior. Screens: Form input screens. Scenarios: Text input, form completion, input validation flows."""
"screen_open_exit_bottomsheet","""Exit confirmation bottom sheet display event. Triggered when: 1) Exit confirmation sheet opens, 2) User attempts to leave flow, 3) Exit prevention mechanism activation. Properties: bottom_sheet_type, cta_count, is_bottom_sheet (true). Purpose: Track exit attempt patterns, measure flow retention, analyze user exit behavior. Screens: Exit confirmation bottom sheets. Scenarios: Flow exit attempts, retention mechanisms, user journey interruptions."""
"toast_message_nominee","""Nominee-specific toast notification event. Triggered when: 1) Nominee-related toast messages appear, 2) Nominee operation feedback, 3) Banking nominee notifications. Properties: response_time (operation duration), nominee operation context. Purpose: Track nominee operation feedback, measure nominee feature engagement, analyze nominee management success. Screens: Nominee management interfaces. Scenarios: Nominee updates, guardian management, nominee operation completion."""
"bottomsheet_view_card_settings","""Card settings bottom sheet display event. Triggered when: 1) Card settings bottom sheets open, 2) Card management interfaces display, 3) Settings modification screens. Properties: flow (card context), category (settings type). Purpose: Track card settings engagement, measure settings modification patterns, analyze card management usage. Screens: Card settings bottom sheets. Scenarios: Card settings access, limit modifications, card management flows."""
"afa_initiated","""Additional Factor Authentication initiation event. Triggered when: 1) MPIN verification screens open, 2) Authentication flow begins, 3) Security verification starts. Properties: flow (screen context). Purpose: Track authentication initiation patterns, measure security flow engagement, analyze authentication requirements. Screens: MPIN authentication screens. Scenarios: Security verification, authentication flows, secure operation initiation."""
"afa_confirmed","""Additional Factor Authentication completion event. Triggered when: 1) MPIN verification succeeds, 2) Authentication confirmation, 3) Security verification completion. Properties: flow (screen context). Purpose: Track authentication success rates, measure security completion patterns, analyze authentication effectiveness. Screens: MPIN confirmation screens. Scenarios: Successful authentication, security completion, verified operation proceeds."""
"card_settings_spend_limits_screen","""Card spend limits screen access event. Triggered when: 1) Spend limits settings screen opens, 2) Card limit management access, 3) Spending controls interface. Properties: card_type, individual limit states (limit name to status mapping). Purpose: Track spend limit management usage, measure limit modification patterns, analyze spending control engagement. Screens: Card limits settings. Scenarios: Limit management access, spending control modifications, card security settings."""
"card_settings_enable_clicked","""Card settings enable action event. Triggered when: 1) Enable buttons clicked in settings, 2) Card feature activation, 3) Settings toggle actions. Properties: card_type, option (setting type). Purpose: Track card feature activation patterns, measure settings modification success, analyze card customization behavior. Screens: Card settings interfaces. Scenarios: Feature enablement, settings activation, card customization."""
"card_setting_bottom_sheet","""Card settings bottom sheet access event. Triggered when: 1) Card settings bottom sheets open, 2) Settings modification interfaces, 3) Card management panels. Properties: card_type, option (screen name). Purpose: Track card settings access patterns, measure settings engagement, analyze card management flows. Screens: Card settings bottom sheets. Scenarios: Settings access, card management, configuration modifications."""
"card_setting_bottomsheet_cta","""Card settings bottom sheet action event. Triggered when: 1) CTA buttons clicked in settings, 2) Settings modification actions, 3) Card management confirmations. Properties: card_type, option (screen), action (CTA text), option_selected, settings_option. Purpose: Track settings modification completion, measure card management success, analyze settings change patterns. Screens: Card settings action panels. Scenarios: Settings confirmations, card management actions, configuration updates."""
"card_settings_home","""Card settings home screen access event. Triggered when: 1) Card settings main screen opens, 2) Card management dashboard access, 3) Settings overview display. Properties: card_type, card_state (current status). Purpose: Track card settings usage, measure card management engagement, analyze settings access patterns. Screens: Card settings home. Scenarios: Settings dashboard access, card management overview, configuration entry point."""
"card_number_copy_clicked","""Card number copy action event. Triggered when: 1) Copy card number button clicked, 2) Card information copying, 3) Card details extraction. Properties: card_type. Purpose: Track card information usage, measure copy feature engagement, analyze card detail access patterns. Screens: Card details screens. Scenarios: Card number copying, information sharing, card detail usage."""
"show_cvv_cta_clicked","""Card CVV visibility toggle event. Triggered when: 1) Show/hide CVV buttons clicked, 2) Card security information toggle, 3) CVV display control. Properties: card_type, action (hide/un_hide). Purpose: Track CVV access patterns, measure security information usage, analyze card detail visibility preferences. Screens: Card details interfaces. Scenarios: CVV reveal, security information access, card detail viewing."""
"card_settings_home_cta","""Card settings home action event. Triggered when: 1) Action buttons clicked on settings home, 2) Settings navigation actions, 3) Card management selections. Properties: card_type, option (action type). Purpose: Track settings navigation patterns, measure card management engagement, analyze settings selection behavior. Screens: Card settings home interface. Scenarios: Settings navigation, management action selection, card configuration access."""
"card_pin_setup_page_opened","""Card PIN setup screen access event. Triggered when: 1) PIN setup screen opens, 2) Card security configuration, 3) PIN management interface. Properties: flow (setup context). Purpose: Track PIN setup engagement, measure card security configuration, analyze PIN management usage. Screens: Card PIN setup interface. Scenarios: PIN creation, security setup, card activation flows."""
"card_pin_setup_continue_clicked","""Card PIN setup progression event. Triggered when: 1) Continue button clicked in PIN setup, 2) PIN configuration progression, 3) Setup flow advancement. Properties: flow, card settings data. Purpose: Track PIN setup completion patterns, measure setup success rates, analyze PIN configuration flows. Screens: PIN setup progression. Scenarios: PIN setup advancement, security configuration progress, setup completion flows."""
"card_settings_bs_continue_clicked","""Card settings bottom sheet continuation event. Triggered when: 1) Continue buttons clicked in settings sheets, 2) Settings modification progression, 3) Configuration confirmations. Properties: flow, settings configuration data. Purpose: Track settings modification progress, measure configuration completion, analyze settings change flows. Screens: Settings bottom sheet continuations. Scenarios: Settings progression, configuration advancement, modification confirmations."""
"confirm_clicked","""General confirmation action event. Triggered when: 1) Confirm buttons clicked, 2) Action confirmations, 3) Operation approvals. Properties: flow (SavingsAccount), action (operation type). Purpose: Track confirmation patterns, measure user decision completion, analyze approval behavior. Screens: Confirmation interfaces. Scenarios: Operation confirmations, action approvals, decision completions."""
"physical_card_booking_screen_open","""Physical card booking screen access event. Triggered when: 1) Card booking screen opens, 2) Physical card ordering interface, 3) Card delivery setup. Properties: flow (card context), card_type. Purpose: Track physical card ordering engagement, measure card booking usage, analyze delivery setup patterns. Screens: Card booking interface. Scenarios: Physical card orders, delivery setup, card booking flows."""
"physical_card_booking_screen_action","""Physical card booking action event. Triggered when: 1) Action buttons clicked in booking, 2) Card ordering actions, 3) Booking flow interactions. Properties: flow, card_type, action (edit_address/order). Purpose: Track card booking actions, measure ordering progression, analyze booking completion patterns. Screens: Card booking actions. Scenarios: Address editing, order placement, booking confirmations."""
"card_shipping_address_opened","""Card shipping address screen access event. Triggered when: 1) Shipping address screen opens, 2) Delivery address configuration, 3) Address management interface. Properties: flow, card_type. Purpose: Track address configuration engagement, measure delivery setup usage, analyze address management patterns. Screens: Shipping address interface. Scenarios: Address configuration, delivery setup, shipping information entry."""
"card_shipping_address_continue_clicked","""Card shipping address continuation event. Triggered when: 1) Continue button clicked in address screen, 2) Address confirmation, 3) Shipping setup progression. Properties: flow, card_type. Purpose: Track address setup completion, measure shipping configuration success, analyze delivery setup patterns. Screens: Address confirmation interface. Scenarios: Address confirmations, shipping setup completion, delivery configuration."""
"physical_card_booking_loading_screen_open","""Physical card booking loading display event. Triggered when: 1) Loading screens appear during booking, 2) Processing states in card ordering, 3) Booking operation progress. Properties: flow, card_type. Purpose: Track booking processing patterns, measure operation wait times, analyze booking performance. Screens: Card booking loading states. Scenarios: Order processing, booking operations, loading state displays."""
"app_open","When app transitions from background to foreground or starts fresh. Triggered from BuddyApplication.onResume() lifecycle method when app enters foreground state. Implementation: BuddyApplication.trackAppOpenEvent() -> analyticsLogger.logEvent() using SliceAppEvent.UseCase.APP_OPEN with EventType.Custom(SliceEventTypes.TRACK). Properties: from ('fresh' for cold start/first launch, 'background' for returning from background), time_duration (milliseconds spent in background - only present for background returns, calculated using SystemClock.elapsedRealtime()). Event Type: TRACK. Critical for measuring app usage patterns, session tracking, and user engagement metrics. Fresh opens occur on first launch or after app process death, background opens track user return patterns."
"app_closed","Tracks when app goes to background or gets completely terminated. Fired from SliceActivityLifecycleCallbacks in two scenarios: 1) App termination/kill - triggered in onActivityDestroyed() when aliveActivities == 0 (last activity destroyed), 2) App backgrounding - triggered in onActivityStopped() when foregroundActivities == 0 (all activities stopped). Implementation: SliceActivityLifecycleCallbacks -> EventUtil.trackAppClosedEvent() -> analyticsLogger.logEvent() using EventConstants.Name.APP_CLOSED with EventType.Custom(SliceEventTypes.SCREEN). Properties: closing_option ('app_closed' for complete termination/kill, 'background' for app going to background). Event Type: SCREEN. For app termination, additional actions include calling onAppClosed(), clearing session token, and saving SessionTerminationReason.APP_KILL. Critical for measuring app usage patterns, session lifecycle tracking, user engagement metrics, and distinguishing between temporary app backgrounding versus complete app closure."